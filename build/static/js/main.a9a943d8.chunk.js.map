{"version":3,"sources":["utils/colorizeField.tsx","workers/SliceWorker/SliceWorkerProxy.ts","workers/SliceWorker/index.worker.ts","workers/GenerationWorker/index.worker.ts","workers/GenerationWorker/GenerationWorkerProxy.ts","utils/concatBinaryArrays.ts","utils/getRandomIndexes.ts","utils/generateField.ts","hooks/useMinesweeper.ts","hooks/useKeyboard.ts","hooks/useElementResize.tsx","hooks/useVirtualization.ts","types/consts.ts","hooks/useField.ts","components/Field/Cell.tsx","components/Field/Cells.tsx","components/Field/FieldContent.tsx","components/Field/index.tsx","components/DigitsCounter/index.tsx","components/FaceButton/index.tsx","components/ParamsModal/index.tsx","components/Header/index.tsx","components/App/index.tsx","index.tsx"],"names":["colorizationWorker","worker","resolve","_isInitialized","initPromise","initPromiseResolve","sliceResolve","this","Promise","_resolve","onmessage","handleMessage","e","data","type","id","fieldBuffer","params","colorsBuffer","String","Math","random","postMessage","autobind","Worker","newColorizeField","a","SharedArrayBuffer","byteLength","processSlice","then","result","colors","Uint32Array","colorsIndexes","GenerationWorkerProxy","generateResolve","buffer","offset","size","mines","minesIndexes","emptiesIndexes","concat32Arrays","arrays","overhead","totalSize","map","v","length","reduce","p","c","n","arr","set","getRandomIndexes","amount","Error","randomIndexes","i","ri","includes","floor","push","SLICE_THRESHOLD","MAX_FIELD_SIZE","generationWorkerProxies","Array","GenerationWorker","workersAvailable","all","s","processField","field","slices","columns","rows","minesOverhead","max","emptiesOverhead","minesLength","emptiesLength","minesCount","emptiesCount","randomIndex","emptySubstitute","conv","x","y","j","cXm1","cXp1","cYm1","cYp1","calculateField","requestFieldSlice","workerIndex","generateSlice","newGenerateField","console","log","Date","now","sliceCount","slicesSizes","lastSliceSize","slicesParams","idx","minesIndexesSize","min","emptiesIndexesSize","r","slice","Uint8Array","slicesStart","pField","getGame","useMinesweeper","handler","useState","gameId","setGameId","setParams","flagsCount","setFlagsCount","gameState","setGameState","setField","setEmptySubstitute","colorizationPromise","setColorizationPromise","loading","setLoading","newGame","useCallback","newParams","addFlag","removeFlag","key","preventDefault","useEffect","document","body","addEventListener","removeEventListener","actions","state","getDimensions","ref","width","clientWidth","height","clientHeight","calculateVisibility","axis","realOffset","containerSize","opts","start","cellSize","overHead","useVirtualization","containerRef","useRef","elementSize","setElementSize","dims","current","window","useElementResize","useMemo","viewport","container","initialX","initialY","getInitialPos","X","setX","Y","setY","xViewportSize","yViewportSize","startX","offsetX","startY","offsetY","handleWheel","newX","deltaX","newY","deltaY","xStart","xEnd","yStart","yEnd","CELL_CLASS","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","useField","props","onFieldUpdate","onGameStateUpdate","onAddFlag","onRemoveFlag","isFirstClick","setIsFirstClick","filledCells","setFilledCells","toIndex","gameLose","_field","newField","gameWin","fillColorful","x1","y1","filledCellsInc","color","touchAround","x2","y2","indexesToFill","g","touchCell","callback","withItself","substituteEmpty","eX","eY","prevIndex","calcAround","ci","indexOf","handleCellClick","leftButton","inc","_flagsCount","_emptyCells","t","vv","x3","y3","preventContextMenu","Cell","className","onCellClick","rest","cls","handleMouseUp","stopPropagation","button","data-state","classNames","onContextMenu","onMouseUp","Cells","smallSlice","array","style","transform","FieldContent","Field","onWheel","DigitsCounter","value","digits","toString","padStart","split","d","React","memo","FaceButton","checkNumber","isNaN","Number","ParamsModal","visible","onNewParams","setColumns","setRows","setMines","onChange","target","onClick","alert","m","Header","time","setTime","paramsModalVisible","setParamsModalVisible","timer","setTimeout","clearTimeout","onNewGame","minesLeft","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"gXASMA,EAAqB,I,aCQvB,WAAYC,GACR,IAAIC,EADqB,yBARZD,YAQW,OAPpBE,gBAA0B,EAON,KALnBC,iBAKmB,OAJXC,wBAIW,OAFpBC,aAAwE,GAI5EC,KAAKH,YAAc,IAAII,SAAQ,SAAAC,GAC3BP,EAAUO,KAEdF,KAAKF,mBAAqBH,EAC1BK,KAAKN,OAASA,EACdM,KAAKN,OAAOS,UAAYH,KAAKI,c,iDAGjC,SACcC,GAAkB,IAAD,EACAA,EAAEC,KAArBC,EADmB,EACnBA,KAAMC,EADa,EACbA,GAAIF,EADS,EACTA,KACL,WAATC,GACAP,KAAKJ,gBAAiB,EACtBI,KAAKF,sBAEI,UAATS,IACAP,KAAKD,aAAaS,GAAIF,UACfN,KAAKD,aAAaS,M,yBAIjC,WACI,OAAOR,KAAKJ,iB,0BAGhB,SAAaa,EAAgCC,EAAqBC,GAAmE,IAAD,OAChI,OAAO,IAAIV,SAAgC,SAACN,GACxC,IAAMa,EAAKI,OAAuB,IAAhBC,KAAKC,UACvB,EAAKf,aAAaS,GAAMb,EACxB,EAAKD,OAAOqB,YAAY,CAAEP,KAAID,KAAM,QAASD,KAAM,CAAEG,cAAaC,SAAQC,yB,8CArBjFK,K,6EDlB2C,IETjC,WACb,OAAO,IAAIC,OAAO,IAA0B,wCFUvC,SAAeC,EAAtB,oC,4CAAO,WAAgCT,EAAgCC,GAAhE,eAAAS,EAAA,6DACGR,EAAe,IAAIS,kBAA2C,EAAzBX,EAAYY,YADpD,kBAEI5B,EAAmB6B,aAAab,EAAaC,EAAQC,GAAcY,MAAK,SAAAC,GAC3E,MAAQ,CACJC,OAAQ,IAAIC,YAAYf,GACxBgB,cAAeH,EAAOG,mBAL3B,4C,2CGXQ,SAAS,IACtB,OAAO,IAAIV,OAAO,IAA0B,sC,ICEzBW,G,aAUjB,WAAYlC,GACR,IAAIC,EADqB,yBARZD,YAQW,OAPpBE,gBAA0B,EAON,KALnBC,iBAKmB,OAJXC,wBAIW,OAFpB+B,gBAAgE,GAIpE7B,KAAKH,YAAc,IAAII,SAAQ,SAAAC,GAC3BP,EAAUO,KAEdF,KAAKF,mBAAqBH,EAC1BK,KAAKN,OAASA,EACdM,KAAKN,OAAOS,UAAYH,KAAKI,c,iDAGjC,SACcC,GAAkB,IAAD,EACAA,EAAEC,KAArBC,EADmB,EACnBA,KAAMC,EADa,EACbA,GAAIF,EADS,EACTA,KACL,WAATC,GACAP,KAAKJ,gBAAiB,EACtBI,KAAKF,sBAEI,aAATS,IACAP,KAAK6B,gBAAgBrB,GAAIF,UAClBN,KAAK6B,gBAAgBrB,M,yBAIpC,WACI,OAAOR,KAAKJ,iB,2BAGhB,SAAckC,EAA2BC,EAAgBC,EAAcC,EAAeC,EAAiCC,GAA0D,IAAD,OAC5K,OAAO,IAAIlC,SAAqB,SAACN,GAC7B,IAAMa,EAAKI,OAAuB,IAAhBC,KAAKC,UACvB,EAAKe,gBAAgBrB,GAAMb,EAC3B,EAAKD,OAAOqB,YAAY,CAAEP,KAAID,KAAM,WAAYD,KAAM,CAAEwB,SAAQC,SAAQC,OAAMC,QAAOC,eAAcC,2B,8CArB1GnB,K,6ECZE,SAASoB,EAAeC,EAAuBC,GAClD,IADiF,EAC3EC,EAAYF,EAAOG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UAAQC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAC9DC,EAAI,IAAIpB,YAAYa,EAAYD,GAClCP,EAAS,EAHoE,cAIjEM,GAJiE,IAIjF,2BAAwB,CAAC,IAAhBU,EAAe,QACpBD,EAAEE,IAAID,EAAKhB,GACXA,GAAUgB,EAAIL,QAN+D,8BAQjF,OAAOI,ECnBI,SAASG,EAAiBP,EAAgBQ,GACrD,GAAIA,EAASR,EACT,MAAM,IAAIS,MAAM,uDAGpB,IADA,IAAMC,EAA0B,GACvBC,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAE7B,IADA,IAAIC,OAAE,EACCF,EAAcG,SAASD,EAAKzC,KAAK2C,MAAM3C,KAAKC,SAAW4B,MAE9DU,EAAcK,KAAKH,GAEvB,OAAOF,ECHX,IAEMM,EAAkBC,IAElBC,EAA0B,YAAI,IAAIC,MAHH,KAGwCrB,KAAI,SAAAnC,GAAC,OAC9E,IAAIuB,EAAsB,IAAIkC,MAG5BC,EAAmB9D,QAAQ+D,IAAIJ,EAAwBpB,KAAI,SAAAyB,GAAC,OAAIA,EAAEpE,gBAgBjE,SAASqE,EAAaxD,EAAqByD,EAAmBC,GACjE,IAAMnC,EAAQvB,EAAOuB,MACfD,EAAOtB,EAAO2D,QAAU3D,EAAO4D,KAE/BC,EAAgB1D,KAAK2D,IAAI,IAAK3D,KAAK2C,MAAMvB,EAAQ,IACjDC,EAAeE,EAAegC,EAAO5B,KAAI,SAAAC,GAAC,OAAIA,EAAEP,gBAAeqC,GAC/DE,EAAkB5D,KAAK2D,IAAI,IAAK3D,KAAK2C,MAAMvB,EAAQ,IACnDE,EAAiBC,EAAegC,EAAO5B,KAAI,SAAAC,GAAC,OAAIA,EAAEN,kBAAiBsC,GAErEC,EAAcxC,EAAaQ,OAAS6B,EACpCI,EAAgBxC,EAAeO,OAAS+B,EACxCG,EAAaR,EAAO5B,KAAI,SAAAC,GAAC,OAAIA,EAAEmC,cAAYjC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GACnEgC,EAAe7C,EAAO4C,EAE1B,GAAIA,EAAa3C,EAAO,CACpB,IADoB,EAEdmB,EAA0BH,EAAiByB,EADpCE,EAAa3C,GADN,cAGImB,GAHJ,IAGpB,2BAAuC,CAAC,IAA/B0B,EAA8B,QACnCX,EAAMjC,EAAa4C,IAAgB,EACnC3C,EAAewC,KAAmBzC,EAAa4C,GAC/C5C,EAAa4C,GAAe,UAC5BF,IACAC,KARgB,oCAWxB,GAAID,EAAa3C,EAAO,CACpB,IADoB,EAEdmB,EAA0BH,EAAiB0B,EADpC1C,EAAQ2C,GADD,cAGIxB,GAHJ,IAGpB,2BAAuC,CAAC,IAA/B0B,EAA8B,QACnCX,EAAMhC,EAAe2C,IAAgB,EACrC5C,EAAawC,KAAiBvC,EAAe2C,GAC7C3C,EAAe2C,GAAe,UAC9BF,IACAC,KARgB,+BAYxB,IAAIE,EAAkB,KACtB,GAAqB,IAAjBF,EAAoB,CAEpB,IADA,IAAIxB,EACuE,aAAnEA,EAAIlB,EAAetB,KAAK2C,MAAM3C,KAAKC,SAAW6D,OAGtDI,EAAkB1B,EAKtB,OAQJ,SAAwB3C,EAAqByD,EAAmBjC,EAA2BwC,GAGvF,IAFA,IAAMM,EAAO,SAACC,EAAWC,GAAZ,OAA0BD,EAAIvE,EAAO2D,QAAUa,GAEnDC,EAAI,EAAGA,EAAIT,EAAaS,IAAK,CAClC,IAAM9B,EAAInB,EAAaiD,GACvB,GAAU,YAAN9B,EAAJ,CAGA,IAAM4B,EAAIpE,KAAK2C,MAAMH,EAAI3C,EAAO2D,SAC1Ba,EAAI7B,EAAI3C,EAAO2D,QAEfe,EAAOH,GAAK,EACZI,EAAOJ,EAAIvE,EAAO2D,QAAU,EAC5BiB,EAAOJ,GAAK,EACZK,EAAOL,EAAIxE,EAAO4D,KAAO,EAE3BgB,GAAQF,GAAS,IAAMjB,EAAMa,EAAKC,EAAI,EAAGC,EAAI,KAC7Cf,EAAMa,EAAKC,EAAI,EAAGC,EAAI,MAEtBI,GAAS,IAAMnB,EAAMa,EAAKC,EAAI,EAAGC,EAAI,KACrCf,EAAMa,EAAKC,EAAI,EAAGC,EAAI,MAEtBI,GAAQD,GAAS,IAAMlB,EAAMa,EAAKC,EAAI,EAAGC,EAAI,KAC7Cf,EAAMa,EAAKC,EAAI,EAAGC,EAAI,MAGtBE,GAAS,IAAMjB,EAAMa,EAAKC,EAAI,EAAGC,EAAI,KACrCf,EAAMa,EAAKC,EAAI,EAAGC,EAAI,MAEtBG,GAAS,IAAMlB,EAAMa,EAAKC,EAAI,EAAGC,EAAI,KACrCf,EAAMa,EAAKC,EAAI,EAAGC,EAAI,MAGtBE,GAAQG,GAAS,IAAMpB,EAAMa,EAAKC,EAAI,EAAGC,EAAI,KAC7Cf,EAAMa,EAAKC,EAAI,EAAGC,EAAI,MAEtBK,GAAS,IAAMpB,EAAMa,EAAKC,EAAI,EAAGC,EAAI,KACrCf,EAAMa,EAAKC,EAAI,EAAGC,EAAI,MAEtBG,GAAQE,GAAS,IAAMpB,EAAMa,EAAKC,EAAI,EAAGC,EAAI,KAC7Cf,EAAMa,EAAKC,EAAI,EAAGC,EAAI,QAlD9BM,CAAe9E,EAAQyD,EAAOjC,EAAcwC,GAErC,CAAEP,QAAOY,mBAGb,SAAeU,EAAtB,8C,4CAAO,WAAiCC,EAAqB5D,EAA2BC,EAAgBC,EAAcC,EAAeC,EAAiCC,GAA/J,SAAAhB,EAAA,+EACIyC,EAAwB8B,GAAaC,cAAc7D,EAAQC,EAAQC,EAAMC,EAAOC,EAAcC,IADlG,4C,sBAsDA,SAAeyD,EAAtB,kC,4CAAO,WAAgClF,GAAhC,yCAAAS,EAAA,sEACG4C,EADH,OAQH,IANA8B,QAAQC,IAAI,qBACEC,KAAKC,MACbhE,EAAOtB,EAAO2D,QAAU3D,EAAO4D,KAEjC2B,EAAapF,KAAK2C,MAAMxB,EAAO0B,GAC7BwC,EAAwB,GACrB7C,EAAI,EAAGA,EAAI4C,EAAY5C,IAC5B6C,EAAYzC,KAAKC,GATlB,OAWGyC,EAAgBnE,EAAO0B,GACT,IAChBuC,GAAc,EACdC,EAAYzC,KAAK0C,IAGfrE,EAAS,IAAIV,kBAAkBY,GAEjCD,EAAS,EACPqE,EAAeF,EAAY1D,KAAI,SAACC,EAAG4D,GACrC,IAAMpE,EAAQpB,KAAK2C,MAAM9C,EAAOuB,OAASQ,EAAIT,IACvCsE,EAA4C,GAAzBzF,KAAK0F,IAAI9D,EAAW,EAARR,GAC/BuE,EAAuD,EAAlC3F,KAAK0F,IAAI9D,EAAoB,GAAhBT,EAAOC,IACzCwE,EAAI,CACNvE,aAAc,IAAId,kBAAkBkF,GACpCnE,eAAgB,IAAIf,kBAAkBoF,GACtC1E,OAAQA,EACRC,SACAC,KAAMS,EACNR,MAAOA,GAGX,OADAF,GAAUU,EACHgD,EAAkBY,EAAKI,EAAE3E,OAAQ2E,EAAE1E,OAAQ0E,EAAEzE,KAAMyE,EAAExE,MAAOwE,EAAEvE,aAAcuE,EAAEtE,gBAAgBZ,MAAK,SAAAC,GAAM,kCACzGA,GADyG,IAE5GU,aAAc,IAAIR,YAAY+E,EAAEvE,cAAcwE,MAAM,EAAGlF,EAAOkD,aAC9DvC,eAAgB,IAAIT,YAAY+E,EAAEtE,gBAAgBuE,MAAM,EAAGlF,EAAOmD,uBAIpER,EAAQ,IAAIwC,WAAW7E,GAEvB8E,EAAcb,KAAKC,MACzBH,QAAQC,IAAI,gBA3CT,UA4CkB7F,QAAQ+D,IAAIoC,GA5C9B,eA4CGhC,EA5CH,OA6CHyB,QAAQC,IAAI,uBAAyBC,KAAKC,MAAQY,GAAe,MA7C9D,EAiDwC1C,EAAaxD,EAAQyD,EAAOC,GAAxDyC,EAjDZ,EAiDK1C,MAAeY,EAjDpB,EAiDoBA,gBAjDpB,kBAkDI,CAAEjD,SAAQqC,MAAO0C,EAAQ9B,oBAlD7B,6C,+BC/HQ+B,E,8EAAf,WAAuBpG,GAAvB,qBAAAS,EAAA,6DACeN,KAAK2C,MAAsB,IAAhB3C,KAAKC,UAAwB,IADvD,SAEqD8E,EAAiBlF,GAFtE,uBAEYoB,EAFZ,EAEYA,OAAQqC,EAFpB,EAEoBA,MAAOY,EAF3B,EAE2BA,gBAF3B,kBAGW,CACHrE,OAAQA,EACRyD,MAAO,CAAErC,SAAQxB,KAAM6D,GACvBY,kBACAtD,OAAQP,EAAiBY,EAAQpB,KAPzC,4C,sBAWe,SAASqG,IAAkB,ICnBNC,EDmBK,EACTC,mBAAS,KADA,mBAC9BC,EAD8B,KACtBC,EADsB,OAETF,mBAAS,CAAE5C,QAAS,GAAIC,KAAM,GAAIrC,MAAO,KAFhC,mBAE9BvB,EAF8B,KAEtB0G,EAFsB,OAIDH,mBAAS,GAJR,mBAI9BI,EAJ8B,KAIlBC,EAJkB,OAKHL,mBAAkC,QAL/B,mBAK9BM,EAL8B,KAKnBC,EALmB,OAOXP,mBAA4B,MAPjB,mBAO9B9C,EAP8B,KAOvBsD,EAPuB,OAQSR,mBAAwB,MARjC,mBAQ9BlC,EAR8B,KAQb2C,EARa,OASiBT,mBAAqC,MATtD,mBAS9BU,EAT8B,KASTC,EATS,OAWPX,oBAAS,GAXF,mBAW9BY,EAX8B,KAWrBC,EAXqB,KAa/BC,EAAUC,sBAAW,uCAAC,WAAgBC,GAAhB,eAAA9G,EAAA,6DACxB2G,GAAW,GADa,SAEFhB,EAAQmB,GAFN,OAElBF,EAFkB,OAGxBD,GAAW,GAEXV,EAAUa,GACVX,EAAc,GACdG,EAASM,EAAQ5D,MAAM7D,MAEvBsH,EAAuBG,EAAQtG,QAC/BiG,EAAmBK,EAAQhD,iBAC3ByC,EAAa,QACbL,EAAUtG,KAAK2C,MAAsB,IAAhB3C,KAAKC,UAAuB,KAZzB,4CAAD,sDAaxB,IAEGoH,EAAUF,uBAAY,WACxBV,EAAcD,EAAa,KAC5B,CAACA,IAEEc,EAAaH,uBAAY,WAC3BV,EAAcD,EAAa,KAC5B,CAACA,IASJ,OC9DgCL,EDuDpBgB,uBAAY,SAAC3H,GACP,MAAVA,EAAE+H,MACF/H,EAAEgI,iBACFN,EAAQ,eAAKrH,OAElB,CAACA,IC3DJ4H,qBAAU,WAEN,OADAC,SAASC,KAAKC,iBAAiB,UAAWzB,GACnC,kBAAMuB,SAASC,KAAKE,oBAAoB,UAAW1B,MAC3D,CAACA,ID0DG,CACH2B,QAAS,CACLZ,UACAG,UACAC,aACAV,WACAD,gBAEJoB,MAAO,CACH1B,SACAxG,SACA2G,aACAE,YACApD,QACAwD,sBACA5C,kBACA8C,YE7EZ,SAASgB,EAAcC,GACnB,MAAO,CACHC,MAAOD,EAAIE,YACXC,OAAQH,EAAII,cCoBpB,SAASC,EAAoBC,EAAiBC,EAAoBC,EAA4BC,GAC1F,IAAIC,EAAQ,EACRzH,EAASsH,EAEPN,EAAU,CAAEQ,EAAK7I,OAAO2D,QAAYkF,EAAKE,SAAWH,EAAcP,OAClEE,EAAU,CAAEM,EAAK7I,OAAO4D,KAAYiF,EAAKE,SAAWH,EAAcL,QALgD,EAOpE,MAATG,EAAeL,EAAQE,EAPsD,mBAQxH,GARwH,UAQnF,CACjC,IAAM3G,EAAWzB,KAAK2C,OAAQ6F,EAAeE,EAAKE,UAClDD,EAAQlH,EAAWiH,EAAKG,SAAW,EAAKpH,EAAWiH,EAAKG,SACxD3H,EAASO,EAAWiH,EAAKG,SAAWL,EAAcA,EAAaG,EAAQD,EAAKE,SAGhF,MAAO,CAAED,QAAOzH,UAGL,SAAS4H,EAAkBJ,GAA+B,IAC7D7I,EAA+B6I,EAA/B7I,OAAQ+I,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SACpBE,EAAeC,iBAAuB,MACtCP,EDpCK,SAA0BR,GAA2C,IAAD,EACzC7B,mBAAsB,CAAE8B,MAAO,IAAKE,OAAQ,MADH,mBACxEa,EADwE,KAC3DC,EAD2D,KAgB/E,OAbAzB,qBAAU,WACN,IAAM0B,EAAOnB,EAAcC,EAAImB,SAC/BF,EAAeC,GAEf,IAAMhD,EAAU,WACZ,IAAMgD,EAAOnB,EAAcC,EAAImB,SAC/BF,EAAeC,IAInB,OADAE,OAAOzB,iBAAiB,SAAUzB,GAC3B,kBAAMkD,OAAOxB,oBAAoB,SAAU1B,MACnD,IAEI8C,ECoBeK,CAAiBP,GAEjCE,EAAcM,mBAAQ,iBAAO,CAC/BrB,MAAOrI,EAAO2D,QAAUkF,EAAKE,SAC7BR,OAAQvI,EAAO4D,KAAOiF,EAAKE,YAC3B,CAAC/I,EAAQ6I,EAAKE,WARkD,EAUrCW,mBAC3B,kBAjDR,SAAuBC,EAAuBC,GAC1C,IAAIC,EAAW,EACXC,EAAW,EAUf,OARIH,EAAStB,MAAQuB,EAAUvB,QAC3BwB,GAAYD,EAAUvB,MAAQsB,EAAStB,OAAS,GAGhDsB,EAASpB,OAASqB,EAAUrB,SAC5BuB,GAAYF,EAAUrB,OAASoB,EAASpB,QAAU,GAG/C,CAAEsB,WAAUC,YAqCTC,CAAcX,EAAaR,KACjC,CAACQ,EAAaR,IAFViB,EAV4D,EAU5DA,SAAUC,EAVkD,EAUlDA,SAVkD,EAehDvD,mBAASsD,GAfuC,mBAe5DG,EAf4D,KAezDC,EAfyD,OAgBhD1D,mBAASuD,GAhBuC,mBAgB5DI,EAhB4D,KAgBzDC,EAhByD,KAkB9DC,EAAgBjK,KAAK2C,MAAM8F,EAAcP,MAAQU,GAAuB,EAAXC,EAC7DqB,EAAgBlK,KAAK2C,MAAM8F,EAAcL,OAASQ,GAAuB,EAAXC,EAnBA,EAqBzBP,EAAoB,IAAKuB,EAAGpB,EAAeC,GAAvEyB,EArBqD,EAqB5DxB,MAAuByB,EArBqC,EAqB7ClJ,OArB6C,EAsBzBoH,EAAoB,IAAKyB,EAAGtB,EAAeC,GAAvE2B,EAtBqD,EAsB5D1B,MAAuB2B,EAtBqC,EAsB7CpJ,OAGvBuG,qBAAU,WACNqC,EAAKJ,GACLM,EAAKL,KACN,CAACD,EAAUC,IAGd,IAAMY,EAAcpD,uBAAY,SAAC3H,GAC7B,IAAIgL,EAAOX,EAAIrK,EAAEiL,OACbC,EAAOX,EAAIvK,EAAEmL,OAEb1B,EAAYf,MAAQO,EAAcP,MAClCsC,GAAQ/B,EAAcP,MAAQe,EAAYf,OAAS,EAEnDe,EAAYf,MAAQO,EAAcP,OAAUsC,GAAQ,GAAKvB,EAAYf,MAAQO,EAAcP,OAC3FsC,GAAQ,GAAKvB,EAAYf,MAAQO,EAAcP,OAE/CsC,EAAO,IACPA,EAAO,GAGPvB,EAAYb,OAASK,EAAcL,OACnCsC,GAAQjC,EAAcL,OAASa,EAAYb,QAAU,EAErDa,EAAYb,OAASK,EAAcL,QAAWsC,GAAQ,GAAKzB,EAAYb,OAASK,EAAcL,QAC9FsC,GAAQ,GAAKzB,EAAYb,OAASK,EAAcL,QAEhDsC,EAAO,IACPA,EAAO,GAGXZ,EAAKU,GACLR,EAAKU,KACN,CAACzB,EAAaR,EAAeoB,EAAGE,IAEnC,MAAO,CACH9B,IAAKc,EACLlD,MAAO,CACHuE,QAASA,EACTE,QAASA,EACTM,OAAQT,EACRU,KAAM7K,KAAK0F,IAAI7F,EAAO2D,QAAS2G,EAASF,GACxCa,OAAQT,EACRU,KAAM/K,KAAK0F,IAAI7F,EAAO4D,KAAM4G,EAASH,IAEzCK,e,aCvGKS,GAAkC,GAC3CC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SACHC,EAAG,SAEHC,GAAI,QACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,OAEJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,QAhCuC,cAPrB,IAyCR,SAlC6B,cANpB,IAyCR,UAnC4B,cALtB,IAyCR,QApC8B,cAJlB,IAyCR,YArC0B,cAHtB,IAyCR,QAtC8B,cAFhB,IAyCR,cAvCwB,GCHhC,SAASC,EAASC,GAAqB,IAE9CnN,EAEAmN,EAFAnN,OAAQyD,EAER0J,EAFQ1J,MAAOwD,EAEfkG,EAFelG,oBAAqB5C,EAEpC8I,EAFoC9I,gBACpC+I,EACAD,EADAC,cAAeC,EACfF,EADeE,kBAAmBC,EAClCH,EADkCG,UAAWC,EAC7CJ,EAD6CI,aAHA,EAKPhH,oBAAS,GALF,mBAKzCiH,EALyC,KAK3BC,EAL2B,OAMTlH,mBAAS,GANA,mBAMzCmH,EANyC,KAM5BC,EAN4B,KASjD/F,qBAAU,WACN6F,GAAgB,GAChBE,EAAe,KAChB,CAAC3N,IAIJ,IAAM4N,EAAUtG,uBAAY,SAAC/C,EAAWC,GAAZ,OAA0BD,EAAIvE,EAAO2D,QAAUa,IAAG,CAACxE,IAUzE6N,GATgBvG,uBAAY,SAAC/C,EAAWC,EAAWsJ,GACrD,OAAIvJ,EAAI,GAAKC,EAAI,GAAKD,GAAKvE,EAAO2D,SAAWa,GAAKxE,EAAO4D,MAC5C,EAENkK,EAAOF,EAAQrJ,EAAGC,MAC1B,CAACxE,IAIa,SAACuE,EAAWC,GACzB,GAAKf,EAAL,CAGA,IAAMsK,EAAW,IAAI9H,WAAWxC,GAChCsK,EAASH,EAAQrJ,EAAGC,IDhCC,ICiCrB,IAAK,IAAI7B,EAAI,EAAGA,EAAIoL,EAAS/L,OAAQW,IAAK,CACtC,IAAIZ,EAAIgM,EAASpL,GACbZ,EAAI,GACJA,GAAK,GAELA,EAAI,IAAMA,GAAK,IACL,KAANA,IACAA,EDtCW,KCyCnBgM,EAASpL,GAAKZ,EAGlBqL,EAAcW,GACdV,EAAkB,WAGhBW,EAAU,SAACD,GACb,IAAK,IAAIpL,EAAI,EAAGA,EAAIoL,EAAS/L,OAAQW,IAAK,CACtC,IAAIZ,EAAIgM,EAASpL,GACbZ,EAAI,GACJA,GAAK,GAEDA,GAAK,KACLA,GAAK,IAEbgM,EAASpL,GAAKZ,EAElBsL,EAAkB,QAGhBY,EAAe,SAAfA,EAAgBC,EAAYC,EAAYJ,EAAsBhN,EAAqBE,GACrF,IAAImN,EAAiB,EAErB,GADAjJ,QAAQC,IAAI,YAAa8I,EAAIC,GACK,IAA9BJ,EAASH,EAAQM,EAAIC,IAMrB,OALIJ,EAASH,EAAQM,EAAIC,IAAO,KAC5BJ,EAASH,EAAQM,EAAIC,KAAQ,GAC7BC,KAGGA,EAGX,IAAMC,EAAQtN,EAAO6M,EAAQM,EAAIC,IAMjC,GALAhJ,QAAQC,IAAI,UAEZD,QAAQC,IAAI,WAGE,IAAViJ,EACA,MAAM,IAAI5L,MAAM,2BAEpB,GAAc,YAAV4L,EAQA,OAPkC,IAA9BN,EAASH,EAAQM,EAAIC,MACrBJ,EAASH,EAAQM,EAAIC,IAAO,GAC5BC,IACAE,EAAYJ,EAAIC,GAAI,SAACI,EAAIC,GACrBJ,GAAkBH,EAAaM,EAAIC,EAAIT,EAAUhN,EAAQE,OAG1DmN,EAMX,IAJA,IAAMK,EAAgBxN,EAAcoN,GAI3B1L,GADG0C,KAAKC,MACJ,GAAG3C,EAAI8L,EAAczM,OAAQW,IAAK,CAC3C,IAAMP,EAAIqM,EAAc9L,GACd,YAANP,GAAmB2L,EAAS3L,GAAK,KACjC2L,EAAS3L,IAAM,GACfgM,KAIA/I,KAAKC,MAab,IAXA,IAAMoJ,EAAI,SAACH,EAAYC,GACnB,IAAMrM,EAAIyL,EAAQW,EAAIC,GACJ,YAAdzN,EAAOoB,IAAoC,IAAhB4L,EAAS5L,GACpCiM,GAAkBH,EAAaM,EAAIC,EAAIT,EAAUhN,EAAQE,GAErD8M,EAAS5L,GAAK,KACd4L,EAAS5L,IAAM,GACfiM,MAIHzL,EAAI,EAAGA,EAAI8L,EAAczM,OAAQW,IAAK,CAC3C,IAAMP,EAAIqM,EAAc9L,GACd,YAANP,GACAkM,EAAYnO,KAAK2C,MAAMV,EAAIpC,EAAO2D,SAAUvB,EAAIpC,EAAO2D,QAAS+K,GAIxE,OAAON,GAGLO,EAAY,SAACJ,EAAYC,EAAYI,GACnCL,GAAM,GAAKC,GAAM,GAAKD,EAAKvO,EAAO2D,SAAW6K,EAAKxO,EAAO4D,MACzDgL,EAASL,EAAIC,IAIfF,EAAc,SAAC/J,EAAWC,EAAWoK,GAA2E,IAAjCC,EAAgC,wDACjHF,EAAUpK,EAAI,EAAGC,EAAI,EAAGoK,GACxBD,EAAUpK,EAAGC,EAAI,EAAGoK,GACpBD,EAAUpK,EAAI,EAAGC,EAAI,EAAGoK,GAExBD,EAAUpK,EAAI,EAAGC,EAAGoK,GACpBD,EAAUpK,EAAI,EAAGC,EAAGoK,GAEpBD,EAAUpK,EAAI,EAAGC,EAAI,EAAGoK,GACxBD,EAAUpK,EAAGC,EAAI,EAAGoK,GACpBD,EAAUpK,EAAI,EAAGC,EAAI,EAAGoK,GAEpBC,GACAF,EAAUpK,EAAGC,EAAGoK,IAUxB,SAASE,EAAgBZ,EAAYC,EAAYJ,EAAsBhN,EAAqBE,GACxF,GAA8B,OAA1BkM,EAAM9I,gBAAV,CAIA,IAAM0K,EAAK5O,KAAK2C,MAAMqK,EAAM9I,gBAAkBrE,EAAO2D,SAC/CqL,EAAK7B,EAAM9I,gBAAkBrE,EAAO4D,KAEpCqL,EAAYrB,EAAQM,EAAIC,GAE9BJ,EAASkB,GAhBM,SAAC1K,EAAWC,EAAWoK,GAA6E,IAC/GzM,EAAI,EAER,OADAmM,EAAY/J,EAAGC,GAAG,SAAC0J,EAAIC,GAAL,OAAYhM,GAAKyM,EAASV,EAAIC,KAFkE,yDAG3GhM,EAae+M,CAAWhB,EAAIC,GAAI,SAAC5J,EAAGC,GAAJ,OAAsC,IAA5BuJ,EAASH,EAAQrJ,EAAGC,IAAY,EAAI,KACvFuJ,EAASZ,EAAM9I,iBAAmB,EAGlCiK,EAAYS,EAAIC,GAAI,SAACzK,EAAGC,IACfD,IAAMwK,GAAMvK,IAAMwK,IAAOjB,EAASH,EAAQrJ,EAAGC,IAAM,IACpDuJ,EAASH,EAAQrJ,EAAGC,KAAO,GAE/B,IAAMrC,EAAIpB,EAAO6M,EAAQrJ,EAAGC,IAC5B,GAAU,IAANrC,EAAS,CACTpB,EAAO6M,EAAQrJ,EAAGC,IAAM,EACxB,IAAM2K,EAAKlO,EAAckB,GACnBwD,EAAMwJ,EAAGC,QAAQxB,EAAQrJ,EAAGC,IAClC2K,EAAGxJ,GAAO,cAGf,GAGH2I,EAAYJ,EAAIC,GAAI,SAAC5J,EAAGC,IACfD,IAAM2J,GAAM1J,IAAM2J,IAAmC,IAA5BJ,EAASH,EAAQrJ,EAAGC,KAAauJ,EAASH,EAAQrJ,EAAGC,IAAM,IACrFuJ,EAASH,EAAQrJ,EAAGC,KAAO,GAE/B,IAAMrC,EAAIpB,EAAO6M,EAAQrJ,EAAGC,IACI,IAA5BuJ,EAASH,EAAQrJ,EAAGC,KAAmB,IAANrC,IACjCpB,EAAO6M,EAAQrJ,EAAGC,IAAM,cAE7B,IAsFP,MAAO,CAAE6K,gBAnFe/H,sBAAW,uCAAC,WAAOgI,EAAqB/K,EAAWC,GAAvC,yCAAA/D,EAAA,yDAC3BgD,EAD2B,oDAK5B8L,EAAM,EAEVpK,QAAQC,IAAI,QAASb,EAAGC,GACxBiJ,GAAgB,GAEVM,EAAW,IAAI9H,WAAWxC,GAC5B1B,EAAIgM,EAASH,EAAQrJ,EAAGC,KACxB8K,EAZ4B,sBAaxBvN,EAAI,IAAMA,EAAI,IAbU,oBAcpByN,EAAc,EACZC,EAA0C,IAC1CC,EAAI,SAACxB,EAAYC,GACnB,KAAID,EAAK,GAAKC,EAAK,GAAKD,GAAMlO,EAAO2D,SAAWwK,GAAMnO,EAAO4D,MAA7D,CAGA,IAAM+L,EAAK5B,EAASH,EAAQM,EAAIC,IAC5BwB,GAAM,IAAMA,EAAK,GACjBH,IAEIG,EAAK,IACLF,EAAY1M,KAAK,CAAEwB,EAAG2J,EAAI1J,EAAG2J,OAIvC5J,EAAI,EAAGC,EAAI,GACbkL,EAAEnL,EAAGC,EAAI,GACTkL,EAAEnL,EAAI,EAAGC,EAAI,GAEbkL,EAAEnL,EAAI,EAAGC,GACTkL,EAAEnL,EAAI,EAAGC,GAETkL,EAAEnL,EAAI,EAAGC,EAAI,GACbkL,EAAEnL,EAAGC,EAAI,GACTkL,EAAEnL,EAAI,EAAGC,EAAI,GAETgL,IAAiBzN,EAAI,GAxCD,kCAyCJkF,EAzCI,QAyCd9E,EAzCc,qBA0CSsN,GA1CT,IA0CpB,2BAA2C,EAAD,QAA5BG,EAA4B,EAA/BrL,EAAUsL,EAAqB,EAAxBrL,EACd+K,GAAOtB,EAAa2B,EAAIC,EAAI9B,EAAU5L,EAAEpB,OAAQoB,EAAElB,eA3ClC,mEA+CxBc,GAAK,IA/CmB,sDAkDlB,IAANA,EAlDwB,qBAmDpByL,GAAoC,OAApBnJ,EAnDI,kCAoDJ4C,EApDI,QAoDd9E,EApDc,OAqDpB2M,EAAgBvK,EAAGC,EAAGuJ,EAAU5L,EAAEpB,OAAQoB,EAAElB,eAC5CsO,GAAOtB,EAAa1J,EAAGC,EAAGuJ,EAAU5L,EAAEpB,OAAQoB,EAAElB,eAtD5B,iDAwDb4M,EAAStJ,EAAGC,IAxDC,iDA2DRyC,EA3DQ,QA2DlB9E,EA3DkB,OA4DxBoN,GAAOtB,EAAa1J,EAAGC,EAAGuJ,EAAU5L,EAAEpB,OAAQoB,EAAElB,eA5DxB,gCAgExBc,EAAI,IACJgM,EAASH,EAAQrJ,EAAGC,KAAO,GAC3B8I,KAEAvL,GAAK,IAAMA,EAAI,KACfgM,EAASH,EAAQrJ,EAAGC,KAAO,GAC3B+I,KAtEwB,QA0E5BG,EAAc6B,IAAQvP,EAAO2D,QAAU3D,EAAO4D,KAAO5D,EAAOuB,OAC5DyM,EAAQD,GAGZX,EAAcW,GACdJ,EAAeD,EAAc6B,GA/EG,4CAAD,0DAiFhC,CAAC7B,EAAajK,EAAOzD,EAAQiH,EAAqBuG,EAAcnJ,K,mBClRjEyL,EAAqB,SAACnQ,GAAD,OAAyBA,EAAEgI,kBAEvC,SAASoI,EAAK5C,GAAqD,IACtEjF,EAAiDiF,EAAjDjF,MAAO8H,EAA0C7C,EAA1C6C,UAAWzL,EAA+B4I,EAA/B5I,EAAGC,EAA4B2I,EAA5B3I,EAAGyL,EAAyB9C,EAAzB8C,YAAgBC,EAD6B,YACpB/C,EADoB,6CAEvEgD,EAAMhF,EAAWjD,GAEjBkI,EAAgB9I,uBAAY,SAAC3H,GAC/BA,EAAEgI,iBACFhI,EAAE0Q,kBACFJ,EAAyB,IAAbtQ,EAAE2Q,OAAc/L,EAAGC,KAChC,CAACyL,EAAa1L,EAAGC,IAEpB,OACI,iCACI+L,aAAYrI,EACZ8H,UAAWQ,IAAW,OAAD,eAAiBL,GAAOH,GAC7CS,cAAeX,EACfY,UAAWN,GACPF,ICfD,SAASS,EAAT,GAGX,IAHoF,IAAxD3Q,EAAuD,EAAvDA,OAAQyD,EAA+C,EAA/CA,MAAOmN,EAAwC,EAAxCA,WAAYX,EAA4B,EAA5BA,YACjDY,EAAe,GAEZtM,EAAIqM,EAAW7F,OAAQxG,EAAIqM,EAAW5F,KAAMzG,IACjD,IAAK,IAAIC,EAAIoM,EAAW3F,OAAQzG,EAAIoM,EAAW1F,KAAM1G,IACjDqM,EAAM9N,KACF,cAACgN,EAAD,CAEIe,MAAO,CACHC,UAAU,aAAD,OHvBT,IGuByBxM,EAAIqM,EAAW7F,QAA/B,eHvBT,IGuBkEvG,EAAIoM,EAAW3F,QAAxE,QAEb1G,EAAGA,EACHC,EAAGA,EACH0D,MAAOzE,EAAMc,EAAIvE,EAAO2D,QAAUa,GAClCyL,YAAaA,GARjB,UACa1L,EAAIqM,EAAW7F,OAD5B,YACwCvG,EAAIoM,EAAW3F,UAanE,OAAQ,mCAAG4F,ICrBA,SAASG,EAAT,GAAkF,IAA1DhR,EAAyD,EAAzDA,OAAQyD,EAAiD,EAAjDA,MAAOuC,EAA0C,EAA1CA,MAAOiK,EAAmC,EAAnCA,YACzD,OACI,qBACID,UAAU,QACVc,MAAO,CACHzI,MJlBQ,IIkBArC,EAAMgF,KAAOhF,EAAM+E,QAAqB,EAChDxC,OJnBQ,IImBCvC,EAAMkF,KAAOlF,EAAMiF,QAAqB,EACjD8F,UAAU,aAAD,OAAe/K,EAAMuE,QAArB,eAAmCvE,EAAMyE,QAAzC,QALjB,SAQI,cAACkG,EAAD,CAAO3Q,OAAQA,EAAQyD,MAAOA,EAAOmN,WAAY5K,EAAOiK,YAAaA,M,MCClE,SAASgB,EAAM9D,GAAqB,IACvCnN,EAAkBmN,EAAlBnN,OAAQyD,EAAU0J,EAAV1J,MAD8B,EAGVwF,EAAkB,CAClDjJ,OAAQA,EACR+I,SL7BgB,GK8BhBC,SAAU,IAHNZ,EAHsC,EAGtCA,IAAKpC,EAHiC,EAGjCA,MAAO0E,EAH0B,EAG1BA,YAMZ2E,EAAoBnC,EAASC,GAA7BkC,gBAER,OACI,qBACIjH,IAAKA,EACL4H,UAAU,gBACVkB,QAASxG,EAHb,SAKI,cAACsG,EAAD,CACIf,YAAaZ,EACbrJ,MAAOA,EACPvC,MAAOA,EACPzD,OAAQA,M,MCxCxB,SAASmR,GAAchE,GAAkF,IAC7FiE,EAA8BjE,EAA9BiE,MAAqBlB,GAAS/C,EAAvB6C,UADqF,YAC9D7C,EAD8D,wBAG9FkE,EAASD,EAAME,WAAWC,SAAS,EAAG,KAAKC,MAAM,IAEvD,OACI,6CACIxB,UAAU,kBACNE,GAFR,aAIKmB,EAAOvP,KAAI,SAAC2P,EAAG9L,GAAJ,OACR,qBAAKqK,UAAWQ,IAAW,QAAS,IAAMiB,IAAS9L,SAMpD+L,WAAMC,KAAKR,I,MCfX,SAASS,GAAWzE,GAAyG,IAChIjF,EAA4BiF,EAA5BjF,MAAOf,EAAqBgG,EAArBhG,QAAY+I,EAD4G,YACnG/C,EADmG,qBAEvI,OACI,iCACI6C,UAAWQ,IAAW,cAAe,CAAErJ,WAAW,SAAWe,IACzDgI,I,UCCV2B,GAAc,SAACtN,GAAD,OAAgBuN,MAAMC,OAAOxN,KAAOwN,OAAOxN,GAAK,GAErD,SAASyN,GAAT,GAA2E,IAApDC,EAAmD,EAAnDA,QAASjS,EAA0C,EAA1CA,OAAQkS,EAAkC,EAAlCA,YAAkC,EACvD3L,mBAASrG,OAAOF,EAAO2D,UADgC,mBAC9EA,EAD8E,KACrEwO,EADqE,OAE7D5L,mBAASrG,OAAOF,EAAO4D,OAFsC,mBAE9EA,EAF8E,KAExEwO,EAFwE,OAG3D7L,mBAASrG,OAAOF,EAAOuB,QAHoC,mBAG9EA,EAH8E,KAGvE8Q,EAHuE,KAWrF,OANAzK,qBAAU,WACNuK,EAAWjS,OAAOF,EAAO2D,UACzByO,EAAQlS,OAAOF,EAAO4D,OACtByO,EAASnS,OAAOF,EAAOuB,UACxB,CAACvB,IAGA,qBAAKgQ,UAAWQ,IAAW,wBAAyB,CAAEyB,YAAtD,SACI,sBAAKjC,UAAU,eAAf,UACI,2CACA,sBAAKA,UAAU,YAAf,UACI,6CACA,uBAAOnQ,KAAK,SAASuR,MAAOzN,EAAS2O,SAAU,SAAA3S,GAAC,OAAIwS,EAAWxS,EAAE4S,OAAOnB,aAE5E,sBAAKpB,UAAU,YAAf,UACI,0CACA,uBAAOnQ,KAAK,SAASuR,MAAOxN,EAAM0O,SAAU,SAAA3S,GAAC,OAAIyS,EAAQzS,EAAE4S,OAAOnB,aAEtE,sBAAKpB,UAAU,YAAf,UACI,2CACA,uBAAOnQ,KAAK,SAASuR,MAAO7P,EAAO+Q,SAAU,SAAA3S,GAAC,OAAI0S,EAAS1S,EAAE4S,OAAOnB,aAExE,qBAAKpB,UAAU,YAAf,SACI,wBAAQwC,QAAS,SAAA7S,GAEb,GADAA,EAAEgI,kBACGkK,GAAYlO,KAAakO,GAAYjO,KAAUiO,GAAYtQ,GAC5D,OAAOkR,MAAM,qCAEjB,IAAMtQ,EAAI4P,OAAOpO,GACXoC,EAAIgM,OAAOnO,GACX8O,EAAIX,OAAOxQ,GACjB,OAAIY,EAAI,GAAK4D,EAAI,GAAK5D,EAAI,KAAS4D,EAAI,IAC5B0M,MAAM,qDAEbC,GAAKvQ,EAAI4D,EAAI,EACN0M,MAAM,mGAEjBP,EAAY,CACRvO,QAASxB,EACTyB,KAAMmC,EACNxE,MAAOmR,KAjBf,wB,MC1BL,SAASC,GAAOxF,GAAsB,IAAD,EACxB5G,mBAAS,GADe,mBACzCqM,EADyC,KACnCC,EADmC,OAEItM,oBAAS,GAFb,mBAEzCuM,EAFyC,KAErBC,EAFqB,KAoBhD,OAfAnL,qBAAU,WACN,IAAIoL,EAAa,KAIjB,MAHwB,SAApB7F,EAAMtG,YACNmM,EAAQC,YAAW,kBAAMJ,EAAQD,EAAO,KAAI,MAEzC,kBAAOI,EAAQE,aAAaF,QAAS,KAC7C,CAACJ,EAAMzF,EAAMtG,YAGhBe,qBAAU,WACkB,SAApBuF,EAAMtG,WACNgM,EAAQ,KAEb,CAAC1F,EAAM3G,OAAQ2G,EAAMtG,YAGpB,sBAAKmJ,UAAU,SAAf,UACI,cAACgC,GAAD,CACIhS,OAAQmN,EAAMnN,OACdiS,QAASa,EACTZ,YAAa,SAAAhQ,GACTiL,EAAMgG,UAAUjR,GAChB6Q,GAAsB,MAG9B,qBAAK/C,UAAU,OAAf,SACI,cAAC,GAAD,CAAeoB,MAAOwB,MAE1B,qBAAK5C,UAAU,UAAf,SACI,cAAC4B,GAAD,CACIzK,QAASgG,EAAMhG,QACfe,MAA2B,SAApBiF,EAAMtG,UAAuB,YAAcsG,EAAMtG,UACxD2L,QAAS,kBAAMO,GAAsB,QAG7C,qBAAK/C,UAAU,aAAf,SACI,cAAC,GAAD,CAAeoB,MAAOjE,EAAMiG,iB,MChB7BC,OAjCf,WAAgB,IAAD,EACgBhN,IAAnB4B,EADG,EACHA,QAASC,EADN,EACMA,MAEjB,OACI,sBAAK8H,UAAWQ,IAAW,MAAOtI,EAAMrB,UAAW,CAAEM,QAASe,EAAMf,UAApE,UACI,cAACwL,GAAD,CACI3S,OAAQkI,EAAMlI,OACdwG,OAAQ0B,EAAM1B,OACdW,QAASe,EAAMf,QACfN,UAAWqB,EAAMrB,UACjBsM,UAAWlL,EAAQZ,QACnB+L,UAAWlL,EAAMlI,OAAOuB,MAAQ2G,EAAMvB,aAExCuB,EAAMzE,OAASyE,EAAMjB,oBACnB,cAACgK,EAAD,CACIjR,OAAQkI,EAAMlI,OACdqE,gBAAiB6D,EAAM7D,gBACvBgJ,kBAAmBpF,EAAQnB,aAC3BwG,UAAWrF,EAAQT,QACnB+F,aAActF,EAAQR,WACtBhE,MAAOyE,EAAMzE,MACbwD,oBAAqBiB,EAAMjB,oBAC3BmG,cAAenF,EAAQlB,WAG3B,qBAAKiJ,UAAU,cAAf,4DC7BhBsD,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJ3L,SAAS4L,eAAe,W","file":"static/js/main.a9a943d8.chunk.js","sourcesContent":["import IGameParams from '../types/IGameParams';\nimport SliceWorker from '../workers/SliceWorker/index.worker';\nimport SliceWorkerProxy from '../workers/SliceWorker/SliceWorkerProxy';\n\nexport interface IColorizationResult {\n    colors: Uint32Array;\n    colorsIndexes: Record<number, Uint32Array>;\n}\n\nconst colorizationWorker = new SliceWorkerProxy(new SliceWorker())\n\nexport async function newColorizeField(fieldBuffer: SharedArrayBuffer, params: IGameParams) {\n    const colorsBuffer = new SharedArrayBuffer(fieldBuffer.byteLength * 4);\n    return colorizationWorker.processSlice(fieldBuffer, params, colorsBuffer).then(result => {\n        return ({\n            colors: new Uint32Array(colorsBuffer),\n            colorsIndexes: result.colorsIndexes,\n        });\n    })\n}","import { autobind } from 'core-decorators';\nimport IGameParams from '../../types/IGameParams';\n\nexport interface ISliceProcessingResult {\n    colorsIndexes: Record<string, Uint32Array>;\n}\n\nexport default class SliceWorkerProxy {\n\n    private readonly worker: Worker;\n    private _isInitialized: boolean = false;\n\n    readonly initPromise: Promise<void>;\n    private readonly initPromiseResolve: () => void;\n\n    private sliceResolve: Record<string, (value: ISliceProcessingResult) => void> = {};\n\n    constructor(worker: Worker) {\n        let resolve: () => void;\n        this.initPromise = new Promise(_resolve => {\n            resolve = _resolve;\n        });\n        this.initPromiseResolve = resolve!;\n        this.worker = worker;\n        this.worker.onmessage = this.handleMessage;\n    }\n\n    @autobind\n    handleMessage(e: MessageEvent) {\n        const { type, id, data } = e.data;\n        if (type === 'inited') {\n            this._isInitialized = true;\n            this.initPromiseResolve();\n        } else\n        if (type === 'slice') {\n            this.sliceResolve[id](data);\n            delete this.sliceResolve[id];\n        }\n    }\n\n    get isInitialized() {\n        return this._isInitialized;\n    }\n\n    processSlice(fieldBuffer: SharedArrayBuffer, params: IGameParams, colorsBuffer: SharedArrayBuffer): Promise<ISliceProcessingResult> {\n        return new Promise<ISliceProcessingResult>((resolve) => {\n            const id = String(Math.random() * 10000000);\n            this.sliceResolve[id] = resolve;\n            this.worker.postMessage({ id, type: 'slice', data: { fieldBuffer, params, colorsBuffer }});\n        })\n    }\n\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/index.worker.a6eb539c.js\");\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/index.worker.29a025dd.js\");\n}\n","import { autobind } from 'core-decorators';\nimport { IFieldSlice } from '../../utils/generateField';\n\nexport default class GenerationWorkerProxy {\n\n    private readonly worker: Worker;\n    private _isInitialized: boolean = false;\n\n    readonly initPromise: Promise<void>;\n    private readonly initPromiseResolve: () => void;\n\n    private generateResolve: Record<string, (value: IFieldSlice) => void> = {};\n\n    constructor(worker: Worker) {\n        let resolve: () => void;\n        this.initPromise = new Promise(_resolve => {\n            resolve = _resolve;\n        });\n        this.initPromiseResolve = resolve!;\n        this.worker = worker;\n        this.worker.onmessage = this.handleMessage;\n    }\n\n    @autobind\n    handleMessage(e: MessageEvent) {\n        const { type, id, data } = e.data;\n        if (type === 'inited') {\n            this._isInitialized = true;\n            this.initPromiseResolve();\n        } else\n        if (type === 'generate') {\n            this.generateResolve[id](data);\n            delete this.generateResolve[id];\n        }\n    }\n\n    get isInitialized() {\n        return this._isInitialized;\n    }\n\n    generateSlice(buffer: SharedArrayBuffer, offset: number, size: number, mines: number, minesIndexes: SharedArrayBuffer, emptiesIndexes: SharedArrayBuffer): Promise<IFieldSlice> {\n        return new Promise<IFieldSlice>((resolve) => {\n            const id = String(Math.random() * 10000000);\n            this.generateResolve[id] = resolve;\n            this.worker.postMessage({ id, type: 'generate', data: { buffer, offset, size, mines, minesIndexes, emptiesIndexes }});\n        })\n    }\n\n}","export function concat8Arrays(arrays: Uint8Array[]): Uint8Array {\n    const totalSize = arrays.map(v => v.length).reduce((p, c) => p + c, 0);\n    const n = new Uint8Array(totalSize);\n    let offset = 0;\n    for (let arr of arrays) {\n        n.set(arr, offset);\n        offset += arr.length;\n    }\n    return n;\n}\n\nexport function concat32Arrays(arrays: Uint32Array[], overhead: number): Uint32Array {\n    const totalSize = arrays.map(v => v.length).reduce((p, c) => p + c, 0);\n    const n = new Uint32Array(totalSize + overhead);\n    let offset = 0;\n    for (let arr of arrays) {\n        n.set(arr, offset);\n        offset += arr.length;\n    }\n    return n;\n}","export default function getRandomIndexes(length: number, amount: number): number[] {\n    if (amount > length) {\n        throw new Error('Cant generate more unique indexes than array length');\n    }\n    const randomIndexes: number[] = [];\n    for (let i = 0; i < amount; i++) {\n        let ri;\n        while (randomIndexes.includes(ri = Math.floor(Math.random() * length))) {\n        }\n        randomIndexes.push(ri);\n    }\n    return randomIndexes;\n}","import GenerationWorker from '../workers/GenerationWorker/index.worker';\nimport GenerationWorkerProxy from '../workers/GenerationWorker/GenerationWorkerProxy';\n\nimport IGameParams from '../types/IGameParams';\n\nimport { concat32Arrays } from '../utils/concatBinaryArrays';\nimport getRandomIndexes from '../utils/getRandomIndexes';\n\nconst MAX_FIELD_SIZE = 10000 * 10000;\nconst MAX_GENERATION_WORKERS_COUNT = 10;\nconst SLICE_THRESHOLD = MAX_FIELD_SIZE / MAX_GENERATION_WORKERS_COUNT;\n\nconst generationWorkerProxies = [...new Array(MAX_GENERATION_WORKERS_COUNT)].map(e => \n    new GenerationWorkerProxy(new GenerationWorker())\n);\n\nconst workersAvailable = Promise.all(generationWorkerProxies.map(s => s.initPromise))\n\nexport interface IFieldSlice {\n    offset: number;\n    emptiesLength: number;\n    minesLength: number;\n    minesCount: number;\n}\n\nexport interface IFieldFullSlice {\n    offset: number;\n    emptiesIndexes: Uint32Array;\n    minesIndexes: Uint32Array;\n    minesCount: number;\n}\n\nexport function processField(params: IGameParams, field: Uint8Array, slices: IFieldFullSlice[]) {\n    const mines = params.mines;\n    const size = params.columns * params.rows;\n\n    const minesOverhead = Math.max(100, Math.floor(mines / 3));\n    const minesIndexes = concat32Arrays(slices.map(v => v.minesIndexes), minesOverhead);\n    const emptiesOverhead = Math.max(100, Math.floor(mines / 3));\n    const emptiesIndexes = concat32Arrays(slices.map(v => v.emptiesIndexes), emptiesOverhead);\n\n    let minesLength = minesIndexes.length - minesOverhead;\n    let emptiesLength = emptiesIndexes.length - emptiesOverhead;\n    let minesCount = slices.map(v => v.minesCount).reduce((p, c) => p + c, 0);\n    let emptiesCount = size - minesCount;\n\n    if (minesCount > mines) {\n        const diff = minesCount - mines;\n        const randomIndexes: number[] = getRandomIndexes(minesLength, diff);\n        for (let randomIndex of randomIndexes) {\n            field[minesIndexes[randomIndex]] = 0;\n            emptiesIndexes[emptiesLength++] = minesIndexes[randomIndex];\n            minesIndexes[randomIndex] = 999999999;\n            minesCount--;\n            emptiesCount++;\n        }\n    } else\n    if (minesCount < mines) {\n        const diff = mines - minesCount;\n        const randomIndexes: number[] = getRandomIndexes(emptiesLength, diff);\n        for (let randomIndex of randomIndexes) {\n            field[emptiesIndexes[randomIndex]] = 9;\n            minesIndexes[minesLength++] = emptiesIndexes[randomIndex];\n            emptiesIndexes[randomIndex] = 999999999;\n            minesCount++;\n            emptiesCount--;\n        }\n    }\n\n    let emptySubstitute = null;\n    if (emptiesCount !== 0) {\n        let i;\n        while ((i = emptiesIndexes[Math.floor(Math.random() * emptiesLength)]) === 999999999) {\n\n        }\n        emptySubstitute = i;\n    }\n\n    calculateField(params, field, minesIndexes, minesLength);\n\n    return { field, emptySubstitute };\n}\n\nexport async function requestFieldSlice(workerIndex: number, buffer: SharedArrayBuffer, offset: number, size: number, mines: number, minesIndexes: SharedArrayBuffer, emptiesIndexes: SharedArrayBuffer): Promise<IFieldSlice> {\n    return generationWorkerProxies[workerIndex].generateSlice(buffer, offset, size, mines, minesIndexes, emptiesIndexes);\n    // return generateFieldSlice(offset, size, mines);\n}\n\nfunction calculateField(params: IGameParams, field: Uint8Array, minesIndexes: Uint32Array, minesLength: number) {\n    const conv = (x: number, y: number) => x * params.columns + y;\n\n    for (let j = 0; j < minesLength; j++) {\n        const i = minesIndexes[j];\n        if (i === 999999999) {\n            continue;\n        }\n        const x = Math.floor(i / params.columns);\n        const y = i % params.columns;\n\n        const cXm1 = x >= 1;\n        const cXp1 = x < params.columns - 1;\n        const cYm1 = y >= 1;\n        const cYp1 = y < params.rows - 1;\n\n        if (cYm1 && cXm1 && (9 !== field[conv(x - 1, y - 1)])) {\n            field[conv(x - 1, y - 1)]++;\n        }\n        if (cYm1 && (9 !== field[conv(x - 0, y - 1)])) {\n            field[conv(x - 0, y - 1)]++;\n        }\n        if (cYm1 && cXp1 && (9 !== field[conv(x + 1, y - 1)])) {\n            field[conv(x + 1, y - 1)]++;\n        }\n\n        if (cXm1 && (9 !== field[conv(x - 1, y - 0)])) {\n            field[conv(x - 1, y - 0)]++;\n        }\n        if (cXp1 && (9 !== field[conv(x + 1, y - 0)])) {\n            field[conv(x + 1, y - 0)]++;\n        }\n\n        if (cXm1 && cYp1 && (9 !== field[conv(x - 1, y + 1)])) {\n            field[conv(x - 1, y + 1)]++;\n        }\n        if (cYp1 && (9 !== field[conv(x - 0, y + 1)])) {\n            field[conv(x - 0, y + 1)]++;\n        }\n        if (cXp1 && cYp1 && (9 !== field[conv(x + 1, y + 1)])) {\n            field[conv(x + 1, y + 1)]++;\n        }\n    }\n\n    // for (let i = 0; i < field.length; i++) {\n    //     field[i] += 10;\n    // }\n}\n\nexport async function newGenerateField(params: IGameParams) {\n    await workersAvailable;\n    console.log('Workers available');\n    const start = Date.now();\n    const size = params.columns * params.rows;\n\n    let sliceCount = Math.floor(size / SLICE_THRESHOLD);\n    const slicesSizes: number[] = [];\n    for (let i = 0; i < sliceCount; i++) {\n        slicesSizes.push(SLICE_THRESHOLD);\n    }\n    const lastSliceSize = size % SLICE_THRESHOLD;\n    if (lastSliceSize > 0) {\n        sliceCount += 1;\n        slicesSizes.push(lastSliceSize);\n    }\n\n    const buffer = new SharedArrayBuffer(size);\n\n    let offset = 0;\n    const slicesParams = slicesSizes.map((v, idx) => {\n        const mines = Math.floor(params.mines * (v / size));\n        const minesIndexesSize = Math.min(v, mines * 5) * 32;\n        const emptiesIndexesSize = Math.min(v, (size - mines) * 5) * 4;\n        const r = {\n            minesIndexes: new SharedArrayBuffer(minesIndexesSize),\n            emptiesIndexes: new SharedArrayBuffer(emptiesIndexesSize),\n            buffer: buffer,\n            offset,\n            size: v,\n            mines: mines\n        };\n        offset += v;\n        return requestFieldSlice(idx, r.buffer, r.offset, r.size, r.mines, r.minesIndexes, r.emptiesIndexes).then(result => ({\n            ...result,\n            minesIndexes: new Uint32Array(r.minesIndexes).slice(0, result.minesLength),\n            emptiesIndexes: new Uint32Array(r.emptiesIndexes).slice(0, result.emptiesLength),\n        }));\n    });\n\n    const field = new Uint8Array(buffer);\n\n    const slicesStart = Date.now();\n    console.log('Slices start');\n    const slices = await Promise.all(slicesParams);\n    console.log('Slices generation: ' + (Date.now() - slicesStart) + 'ms');\n\n    // field.set(new Uint8Array(buffer), 0);\n    // console.log('field: ', field);\n    const { field: pField, emptySubstitute } = processField(params, field, slices);\n    return { buffer, field: pField, emptySubstitute };\n}","import { useState, useCallback } from \"react\";\n\nimport { newColorizeField } from \"../utils/colorizeField\";\nimport { newGenerateField } from \"../utils/generateField\";\n\nimport ColorizationPromise from \"../types/ColorizationPromise\";\nimport IGameParams from \"../types/IGameParams\";\n\nimport useKeyboard from \"./useKeyboard\";\n\nasync function getGame(params: IGameParams) {\n    const id = Math.floor(Math.random() * 100000000) + 's';\n    const { buffer, field, emptySubstitute } = await newGenerateField(params);\n    return {\n        params: params,\n        field: { buffer, data: field },\n        emptySubstitute,\n        colors: newColorizeField(buffer, params)\n    };\n}\n\nexport default function useMinesweeper() {\n    const [gameId, setGameId] = useState('1');\n    const [params, setParams] = useState({ columns: 10, rows: 10, mines: 10 });\n\n    const [flagsCount, setFlagsCount] = useState(0);\n    const [gameState, setGameState] = useState<'none' | 'lose' | 'win'>('none');\n\n    const [field, setField] = useState<Uint8Array | null>(null);\n    const [emptySubstitute, setEmptySubstitute] = useState<number | null>(null);\n    const [colorizationPromise, setColorizationPromise] = useState<ColorizationPromise | null>(null);\n\n    const [loading, setLoading] = useState(false);\n\n    const newGame = useCallback(async function (newParams: IGameParams) {\n        setLoading(true);\n        const newGame = await getGame(newParams);\n        setLoading(false);\n\n        setParams(newParams);\n        setFlagsCount(0);\n        setField(newGame.field.data);\n\n        setColorizationPromise(newGame.colors);\n        setEmptySubstitute(newGame.emptySubstitute);\n        setGameState('none');\n        setGameId(Math.floor(Math.random() * 10000000) + 's');\n    }, []);\n\n    const addFlag = useCallback(() => {\n        setFlagsCount(flagsCount + 1);\n    }, [flagsCount]);\n\n    const removeFlag = useCallback(() => {\n        setFlagsCount(flagsCount - 1);\n    }, [flagsCount]);\n\n    useKeyboard(useCallback((e) => {\n        if (e.key === ' ') {\n            e.preventDefault();\n            newGame({ ...params });\n        }\n    }, [params]));\n\n    return {\n        actions: {\n            newGame,\n            addFlag,\n            removeFlag,\n            setField,\n            setGameState,\n        },\n        state: {\n            gameId,\n            params,\n            flagsCount,\n            gameState,\n            field,\n            colorizationPromise,\n            emptySubstitute,\n            loading\n        },\n    };\n}","import { useEffect } from \"react\";\n\nexport default function useKeyboard(handler: (e: KeyboardEvent) => void) {\n    useEffect(() => {\n        document.body.addEventListener('keydown', handler);\n        return () => document.body.removeEventListener('keydown', handler);\n    }, [handler]);\n}","import { RefObject, useState, useEffect } from \"react\";\nimport IDimensions from \"../types/IDimensions\";\n\nfunction getDimensions(ref: HTMLElement) {\n    return {\n        width: ref.clientWidth,\n        height: ref.clientHeight,\n    };\n}\n\nexport default function useElementResize(ref: RefObject<HTMLElement>): IDimensions {\n    const [elementSize, setElementSize] = useState<IDimensions>({ width: 800, height: 600 });\n\n    useEffect(() => {\n        const dims = getDimensions(ref.current!);\n        setElementSize(dims);\n\n        const handler = () => {\n            const dims = getDimensions(ref.current!);\n            setElementSize(dims);\n        };\n\n        window.addEventListener('resize', handler);\n        return () => window.removeEventListener('resize', handler);\n    }, []);\n\n    return elementSize;\n}","import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport IDimensions from \"../types/IDimensions\";\nimport IGameParams from \"../types/IGameParams\";\nimport useElementResize from \"./useElementResize\";\n\nfunction getInitialPos(viewport: IDimensions, container: IDimensions) {\n    let initialX = 0;\n    let initialY = 0;\n\n    if (viewport.width < container.width) {\n        initialX = (container.width - viewport.width) / 2;\n    }\n\n    if (viewport.height < container.height) {\n        initialY = (container.height - viewport.height) / 2;\n    }\n\n    return { initialX, initialY };\n}\n\nexport interface IVirtualizationOptions {\n    params: IGameParams;\n    cellSize: number;\n    overHead: number;\n}\n\nfunction calculateVisibility(axis: 'x' | 'y', realOffset: number, containerSize: IDimensions, opts: IVirtualizationOptions) {\n    let start = 0;\n    let offset = realOffset;\n\n    const width =   [ opts.params.columns   * opts.cellSize,  containerSize.width  ];\n    const height =  [ opts.params.rows      * opts.cellSize,  containerSize.height ];\n\n    const [ elementLength, containerLength ] = axis === 'x' ? width : height;\n    if (elementLength > containerLength) {\n        const overhead = Math.floor((-realOffset) / (opts.cellSize));\n        start = overhead < opts.overHead ? 0 : (overhead - opts.overHead);\n        offset = overhead < opts.overHead ? realOffset : (realOffset + start * opts.cellSize);\n    }\n\n    return { start, offset };\n}\n\nexport default function useVirtualization(opts: IVirtualizationOptions) {\n    const { params, cellSize, overHead } = opts;\n    const containerRef = useRef<HTMLDivElement>(null);\n    const containerSize = useElementResize(containerRef);\n    \n    const elementSize = useMemo(() => ({\n        width: params.columns * opts.cellSize,\n        height: params.rows * opts.cellSize\n    }), [params, opts.cellSize]);\n\n    const { initialX, initialY } = useMemo(\n        () => getInitialPos(elementSize, containerSize),\n        [elementSize, containerSize]\n    );\n    \n    const [ X, setX ] = useState(initialX);\n    const [ Y, setY ] = useState(initialY);\n\n    const xViewportSize = Math.floor(containerSize.width / cellSize) + overHead * 2;\n    const yViewportSize = Math.floor(containerSize.height / cellSize) + overHead * 2;\n\n    const { start: startX, offset: offsetX } = calculateVisibility('x', X, containerSize, opts);\n    const { start: startY, offset: offsetY } = calculateVisibility('y', Y, containerSize, opts);\n\n    // on resize\n    useEffect(() => {\n        setX(initialX);\n        setY(initialY);\n    }, [initialX, initialY]);\n\n    // on scroll\n    const handleWheel = useCallback((e) => {\n        let newX = X - e.deltaX;\n        let newY = Y - e.deltaY;\n\n        if (elementSize.width < containerSize.width) {\n            newX = (containerSize.width - elementSize.width) / 2;\n        } else\n        if (elementSize.width > containerSize.width && (newX < -1 * (elementSize.width - containerSize.width))) {\n            newX = -1 * (elementSize.width - containerSize.width);\n        } else\n        if (newX > 0) {\n            newX = 0;\n        }\n\n        if (elementSize.height < containerSize.height) {\n            newY = (containerSize.height - elementSize.height) / 2;\n        } else\n        if (elementSize.height > containerSize.height && (newY < -1 * (elementSize.height - containerSize.height))) {\n            newY = -1 * (elementSize.height - containerSize.height);\n        } else\n        if (newY > 0) {\n            newY = 0;\n        }\n\n        setX(newX);\n        setY(newY);\n    }, [elementSize, containerSize, X, Y]);\n\n    return {\n        ref: containerRef,\n        slice: {\n            offsetX: offsetX,\n            offsetY: offsetY,\n            xStart: startX,\n            xEnd: Math.min(params.columns, startX + xViewportSize),\n            yStart: startY,\n            yEnd: Math.min(params.rows, startY + yViewportSize),\n        },\n        handleWheel,\n    };\n}","export const cellSize = 30;\n\nexport const CELL_EMPTY = 255;\nexport const CELL_CLOSED = 254;\nexport const CELL_MINE = 253;\nexport const CELL_EXPLODED = 252;\nexport const CELL_FLAG = 251;\nexport const CELL_FLAG_WRONG = 250;\n\nexport const CELL_CLASS: Record<number, string> = {\n    0: 'closed',\n    1: 'closed',\n    2: 'closed',\n    3: 'closed',\n    4: 'closed',\n    5: 'closed',\n    6: 'closed',\n    7: 'closed',\n    8: 'closed',\n    9: 'closed',\n\n    10: 'empty',\n    11: 'm1',\n    12: 'm2',\n    13: 'm3',\n    14: 'm4',\n    15: 'm5',\n    16: 'm6',\n    17: 'm7',\n    18: 'm8',\n    19: 'mine',\n\n    20: 'flag',\n    21: 'flag',\n    22: 'flag',\n    23: 'flag',\n    24: 'flag',\n    25: 'flag',\n    26: 'flag',\n    27: 'flag',\n    28: 'flag',\n    29: 'flag',\n\n    [CELL_EMPTY]: 'empty',\n    [CELL_CLOSED]: 'closed',\n    [CELL_MINE]: 'mine',\n    [CELL_EXPLODED]: 'exploded',\n    [CELL_FLAG]: 'flag',\n    [CELL_FLAG_WRONG]: 'flag-wrong',\n}","import { useCallback, useEffect, useState } from \"react\";\nimport { IFieldProps } from \"../components/Field\";\nimport { CELL_EXPLODED, CELL_FLAG_WRONG } from \"../types/consts\";\nimport FieldArray from \"../types/FieldArray\";\nimport IGameParams from \"../types/IGameParams\";\n\nexport default function useField(props: IFieldProps) {\n    const {\n        params, field, colorizationPromise, emptySubstitute,\n        onFieldUpdate, onGameStateUpdate, onAddFlag, onRemoveFlag\n    } = props;\n    const [ isFirstClick, setIsFirstClick ] = useState(true);\n    const [ filledCells, setFilledCells ] = useState(0);\n\n    // on new game\n    useEffect(() => {\n        setIsFirstClick(true);\n        setFilledCells(0);\n    }, [params]);\n\n\n    // helper functions\n    const toIndex = useCallback((x: number, y: number) => x * params.columns + y, [params]);\n    const getFieldValue = useCallback((x: number, y: number, _field: FieldArray) => {\n        if (x < 0 || y < 0 || x >= params.columns || y >= params.rows) {\n            return - 1;\n        }\n        return _field[toIndex(x, y)]\n    }, [params]);\n\n\n    // game functions. I don't use useCallback intentionally - they will be updated almost on every render.\n    const gameLose = (x: number, y: number) => {\n        if (!field) {\n            return;\n        }\n        const newField = new Uint8Array(field);\n        newField[toIndex(x, y)] = CELL_EXPLODED;\n        for (let i = 0; i < newField.length; i++) {\n            let v = newField[i];\n            if (v < 10) {\n                v += 10;\n            } else\n            if (v < 30 && v >= 20) {\n                if (v !== 29) {\n                    v = CELL_FLAG_WRONG;\n                }\n            }\n            newField[i] = v;\n        }\n\n        onFieldUpdate(newField);\n        onGameStateUpdate('lose');\n    }\n\n    const gameWin = (newField: FieldArray) => {\n        for (let i = 0; i < newField.length; i++) {\n            let v = newField[i];\n            if (v < 10) {\n                v += 10;\n            } else\n                if (v >= 20) {\n                    v -= 10;\n                }\n            newField[i] = v;\n        }\n        onGameStateUpdate('win');\n    }\n\n    const fillColorful = (x1: number, y1: number, newField: FieldArray, colors: Uint32Array, colorsIndexes: Record<string, Uint32Array>) => {\n        let filledCellsInc = 0;\n        console.log('colorful ', x1, y1);\n        if (newField[toIndex(x1, y1)] !== 0) {\n            if (newField[toIndex(x1, y1)] < 10) {\n                newField[toIndex(x1, y1)] += 10;\n                filledCellsInc++;\n            }\n\n            return filledCellsInc;\n        }\n\n        const color = colors[toIndex(x1, y1)];\n        console.log('field:');\n        // printField(params, newField);\n        console.log('colors:');\n        // printField(params, colors);\n        // console.log('colors: ', colors);\n        if (color === 0) {\n            throw new Error('Very bad thing happened');\n        }\n        if (color === 999999999) {\n            if (newField[toIndex(x1, y1)] === 0) {\n                newField[toIndex(x1, y1)] = 10;\n                filledCellsInc++;\n                touchAround(x1, y1, (x2, y2) => {\n                    filledCellsInc += fillColorful(x2, y2, newField, colors, colorsIndexes);\n                });\n            }\n            return filledCellsInc;\n        }\n        const indexesToFill = colorsIndexes[color];\n        // console.log('color: ', color);\n        // console.log('colorsIndexes: ', colorsIndexes);\n        let start = Date.now();\n        for (let i = 0; i < indexesToFill.length; i++) {\n            const n = indexesToFill[i];\n            if (n !== 999999999 && newField[n] < 10) {\n                newField[n] += 10;\n                filledCellsInc++;\n            }\n        }\n        // console.log('a: ', (Date.now() - start) + 'ms');\n        start = Date.now();\n\n        const g = (x2: number, y2: number) => {\n            const c = toIndex(x2, y2);\n            if (colors[c] === 999999999 && newField[c] === 0) {\n                filledCellsInc += fillColorful(x2, y2, newField, colors, colorsIndexes);\n            } else\n                if (newField[c] < 10) {\n                    newField[c] += 10;\n                    filledCellsInc++;\n                }\n        };\n\n        for (let i = 0; i < indexesToFill.length; i++) {\n            const n = indexesToFill[i];\n            if (n !== 999999999) {\n                touchAround(Math.floor(n / params.columns), n % params.columns, g);\n            }\n        }\n\n        return filledCellsInc;\n    }\n\n    const touchCell = (x2: number, y2: number, callback: (x: number, y: number) => void) => {\n        if (x2 >= 0 && y2 >= 0 && x2 < params.columns && y2 < params.rows) {\n            callback(x2, y2);\n        }\n    };\n\n    const touchAround = (x: number, y: number, callback: (x: number, y: number) => void, withItself: boolean = false) => {\n        touchCell(x - 1, y - 1, callback);\n        touchCell(x, y - 1, callback);\n        touchCell(x + 1, y - 1, callback);\n\n        touchCell(x - 1, y, callback);\n        touchCell(x + 1, y, callback);\n\n        touchCell(x - 1, y + 1, callback);\n        touchCell(x, y + 1, callback);\n        touchCell(x + 1, y + 1, callback);\n\n        if (withItself) {\n            touchCell(x, y, callback);\n        }\n    }\n\n    const calcAround = (x: number, y: number, callback: (x: number, y: number) => number, withItself: boolean = false) => {\n        let c = 0;\n        touchAround(x, y, (x1, y1) => c += callback(x1, y1), withItself);\n        return c;\n    }\n\n    function substituteEmpty(x1: number, y1: number, newField: FieldArray, colors: Uint32Array, colorsIndexes: Record<string, Uint32Array>) {\n        if (props.emptySubstitute === null) {\n            return;\n        }\n\n        const eX = Math.floor(props.emptySubstitute / params.columns);\n        const eY = props.emptySubstitute % params.rows;\n\n        const prevIndex = toIndex(x1, y1);\n\n        newField[prevIndex] = calcAround(x1, y1, (x, y) => newField[toIndex(x, y)] === 9 ? 1 : 0); // recalc\n        newField[props.emptySubstitute] = 9; // recalc\n\n        // new mine cell\n        touchAround(eX, eY, (x, y) => {\n            if ((x !== eX || y !== eY) && newField[toIndex(x, y)] < 8) {\n                newField[toIndex(x, y)] += 1;\n            }\n            const c = colors[toIndex(x, y)];\n            if (c !== 0) {\n                colors[toIndex(x, y)] = 0;\n                const ci = colorsIndexes[c];\n                const idx = ci.indexOf(toIndex(x, y));\n                ci[idx] = 999999999;\n                // fix areas cut\n            }\n        }, true);\n\n        // new emtpy cell\n        touchAround(x1, y1, (x, y) => {\n            if ((x !== x1 || y !== y1) && newField[toIndex(x, y)] !== 9 && newField[toIndex(x, y)] > 0) {\n                newField[toIndex(x, y)] -= 1;\n            }\n            const c = colors[toIndex(x, y)];\n            if (newField[toIndex(x, y)] === 0 && c === 0) {\n                colors[toIndex(x, y)] = 999999999; // broken color\n            }\n        }, true);\n    }\n\n    const handleCellClick = useCallback(async (leftButton: boolean, x: number, y: number) => {\n        if (!field) {\n            return;\n        }\n\n        let inc = 0;\n\n        console.log('click', x, y);\n        setIsFirstClick(false);\n\n        const newField = new Uint8Array(field);\n        let v = newField[toIndex(x, y)];\n        if (leftButton) {\n            if (v > 10 && v < 19) {\n                let _flagsCount = 0;\n                const _emptyCells: { x: number, y: number }[] = [];\n                const t = (x1: number, y1: number) => {\n                    if (x1 < 0 || y1 < 0 || x1 >= params.columns || y1 >= params.rows) {\n                        return;\n                    }\n                    const vv = newField[toIndex(x1, y1)];\n                    if (vv >= 20 && vv < 30) {\n                        _flagsCount++;\n                    } else\n                        if (vv < 10) {\n                            _emptyCells.push({ x: x1, y: y1 });\n                        }\n                }\n\n                t(x - 1, y - 1);\n                t(x, y - 1);\n                t(x + 1, y - 1);\n\n                t(x - 1, y);\n                t(x + 1, y);\n\n                t(x - 1, y + 1);\n                t(x, y + 1);\n                t(x + 1, y + 1);\n\n                if (_flagsCount === (v - 10)) {\n                    const c = await colorizationPromise;\n                    for (let { x: x3, y: y3 } of _emptyCells) {\n                        inc += fillColorful(x3, y3, newField, c.colors, c.colorsIndexes);\n                    }\n                }\n            } else\n            if (v >= 10) {\n                return;\n            } else {\n            if (v === 9) {\n                if (isFirstClick && emptySubstitute !== null) {\n                    const c = await colorizationPromise;\n                    substituteEmpty(x, y, newField, c.colors, c.colorsIndexes);\n                    inc += fillColorful(x, y, newField, c.colors, c.colorsIndexes);\n                } else {\n                    return gameLose(x, y);\n                }\n            } else {\n                const c = await colorizationPromise;\n                inc += fillColorful(x, y, newField, c.colors, c.colorsIndexes);\n            }\n            }\n        } else {\n            if (v < 10) {\n                newField[toIndex(x, y)] += 20;\n                onAddFlag();\n            } else\n            if (v >= 20 && v < 30) {\n                newField[toIndex(x, y)] -= 20;\n                onRemoveFlag();\n            }\n        }\n\n        if (filledCells + inc === params.columns * params.rows - params.mines) {\n            gameWin(newField);\n        }\n\n        onFieldUpdate(newField);\n        setFilledCells(filledCells + inc);\n\n    }, [filledCells, field, params, colorizationPromise, isFirstClick, emptySubstitute]);\n\n    return { handleCellClick };\n}","import classNames from \"classnames\";\nimport React, { HTMLAttributes, useCallback } from \"react\";\nimport { CELL_CLASS } from \"../../types/consts\";\n\nexport interface ICellProps {\n    state: number;\n    x: number;\n    y: number;\n    onCellClick: (leftButton: boolean, x: number, y: number) => void;\n}\n\nconst preventContextMenu = (e: React.MouseEvent) => e.preventDefault();\n\nexport default function Cell(props: HTMLAttributes<HTMLDivElement> & ICellProps) {\n    const { state, className, x, y, onCellClick, ...rest } = props;\n    const cls = CELL_CLASS[state];\n\n    const handleMouseUp = useCallback((e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        onCellClick(e.button === 0, x, y);\n    }, [onCellClick, x, y]);\n\n    return (\n        <div\n            data-state={state}\n            className={classNames('cell', `cell-${cls}`, className)}\n            onContextMenu={preventContextMenu}\n            onMouseUp={handleMouseUp}\n            {...rest}\n        />\n    );\n}","import React from \"react\";\nimport { cellSize } from \"../../types/consts\";\nimport FieldArray from \"../../types/FieldArray\";\nimport { IFieldSmallSlice } from \"../../types/IFieldSlice\";\nimport IGameParams from \"../../types/IGameParams\";\nimport Cell from \"./Cell\";\n\nexport interface ICellsProps {\n    params: IGameParams;\n    field: FieldArray;\n    smallSlice: IFieldSmallSlice;\n    onCellClick: (leftButton: boolean, x: number, y: number) => void;\n}\n\nexport default function Cells({ params, field, smallSlice, onCellClick }: ICellsProps) {\n    const array: any[] = [];\n\n    for (let x = smallSlice.xStart; x < smallSlice.xEnd; x++) {\n        for (let y = smallSlice.yStart; y < smallSlice.yEnd; y++) {\n            array.push(\n                <Cell\n                    key={`${(x - smallSlice.xStart)}:${(y - smallSlice.yStart)}`}\n                    style={{\n                        transform: `translate(${(x - smallSlice.xStart) * cellSize}px, ${(y - smallSlice.yStart) * cellSize}px)`\n                    }}\n                    x={x}\n                    y={y}\n                    state={field[x * params.columns + y]}\n                    onCellClick={onCellClick}\n                />\n            );\n        }\n    }\n\n    return (<>{array}</>)\n}","import React from \"react\";\nimport { cellSize } from \"../../types/consts\";\nimport IFieldSlice from \"../../types/IFieldSlice\";\nimport IGameParams from \"../../types/IGameParams\";\nimport Cells from \"./Cells\";\n\nexport interface IFieldContentProps {\n    params: IGameParams;\n    field: Uint8Array;\n    slice: IFieldSlice;\n    onCellClick: (leftButton: boolean, x: number, y: number) => void\n}\n\nexport default function FieldContent({ params, field, slice, onCellClick }: IFieldContentProps) {\n    return (\n        <div\n            className=\"field\"\n            style={{\n                width: (slice.xEnd - slice.xStart) * cellSize + 2,\n                height: (slice.yEnd - slice.yStart) * cellSize + 2,\n                transform: `translate(${slice.offsetX}px, ${slice.offsetY}px)`\n            }}\n        >\n            <Cells params={params} field={field} smallSlice={slice} onCellClick={onCellClick} />\n        </div>\n    );\n}\n","import useVirtualization from '../../hooks/useVirtualization';\nimport useField from '../../hooks/useField';\n\nimport FieldContent from './FieldContent';\n\nimport { cellSize } from '../../types/consts';\nimport ColorizationPromise from '../../types/ColorizationPromise';\nimport FieldArray from '../../types/FieldArray';\nimport IGameParams from '../../types/IGameParams';\n\nimport './style.scss';\n\nexport interface IFieldProps {\n    emptySubstitute: number | null;\n    params: IGameParams;\n    field: FieldArray;\n    colorizationPromise: ColorizationPromise;\n\n    onFieldUpdate: (newField: Uint8Array) => void;\n    onGameStateUpdate: (newState: 'none' | 'win' | 'lose') => void;\n    onAddFlag: () => void;\n    onRemoveFlag: () => void;\n}\n\nexport default function Field(props: IFieldProps) {\n    const { params, field } = props;\n\n    const { ref, slice, handleWheel } = useVirtualization({\n        params: params,\n        cellSize: cellSize,\n        overHead: 3\n    });\n\n    const { handleCellClick } = useField(props);\n\n    return (\n        <div\n            ref={ref}\n            className=\"field-wrapper\"\n            onWheel={handleWheel}\n        >\n            <FieldContent\n                onCellClick={handleCellClick}\n                slice={slice}\n                field={field}\n                params={params}\n            />\n        </div>\n    );\n}","import classNames from 'classnames';\nimport React from 'react';\n\nimport './style.scss';\n\nfunction DigitsCounter(props: Exclude<React.HTMLAttributes<HTMLDivElement>, 'src'> & { value: number }) {\n    const { value, className, ...rest } = props;\n\n    const digits = value.toString().padStart(3, '0').split('');\n\n    return (\n        <div\n            className=\"digits-counter\"\n            {...rest}\n        >\n            {digits.map((d, idx) => (\n                <div className={classNames('digit', 'd' + d)} key={idx} />\n            ))}\n        </div>\n    )\n}\n\nexport default React.memo(DigitsCounter);","import classNames from 'classnames';\nimport React from 'react';\n\nimport './style.scss';\n\ntype FaceState = 'pressed' | 'unpressed' | 'win' | 'lose';\n\nexport default function FaceButton(props: Exclude<React.HTMLAttributes<HTMLImageElement>, 'src'> & { loading: boolean, state: FaceState }) {\n    const { state, loading, ...rest } = props;\n    return (\n        <div\n            className={classNames('face-button', { loading }, 'state-' + state)}\n            {...rest}\n        />\n    )\n}","import classNames from \"classnames\";\nimport { useEffect, useState } from \"react\";\nimport IGameParams from \"../../types/IGameParams\";\n\nimport './style.scss';\n\nexport interface IParamsModalProps {\n    visible: boolean;\n    \n    params: IGameParams;\n    onNewParams: (params: IGameParams) => void;\n}\n\nconst checkNumber = (x: string) => !isNaN(Number(x)) && Number(x) > 0;\n\nexport default function ParamsModal({ visible, params, onNewParams }: IParamsModalProps) {\n    const [columns, setColumns] = useState(String(params.columns));\n    const [rows, setRows] = useState(String(params.rows));\n    const [mines, setMines] = useState(String(params.mines));\n\n    useEffect(() => {\n        setColumns(String(params.columns));\n        setRows(String(params.rows));\n        setMines(String(params.mines));\n    }, [params])\n\n    return (\n        <div className={classNames('params-modal-backdrop', { visible })}>\n            <div className=\"params-modal\">\n                <h3>New game:</h3>\n                <div className=\"field-row\">\n                    <label>Columns:</label>\n                    <input type=\"number\" value={columns} onChange={e => setColumns(e.target.value)} />\n                </div>\n                <div className=\"field-row\">\n                    <label>Rows:</label>\n                    <input type=\"number\" value={rows} onChange={e => setRows(e.target.value)} />\n                </div>\n                <div className=\"field-row\">\n                    <label>Mines:</label>\n                    <input type=\"number\" value={mines} onChange={e => setMines(e.target.value)} />\n                </div>\n                <div className=\"field-row\">\n                    <button onClick={e => {\n                        e.preventDefault();\n                        if (!checkNumber(columns) || !checkNumber(rows) || !checkNumber(mines)) {\n                            return alert('All numbers must be valid and > 1');\n                        }\n                        const c = Number(columns);\n                        const r = Number(rows);\n                        const m = Number(mines);\n                        if (c < 2 || r < 2 || c > 10000 || r > 10000) {\n                            return alert('Both columns and rows must be between 2 and 10000');\n                        }\n                        if (m >= c * r - 1) {\n                            return alert('Amount of mines must be less than field size and one empty cell must exist (m < c * r - 1)');\n                        }\n                        onNewParams({\n                            columns: c,\n                            rows: r,\n                            mines: m,\n                        })\n                    }}>OK!</button>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport IGameParams from \"../../types/IGameParams\";\nimport DigitsCounter from \"../DigitsCounter\";\nimport FaceButton from \"../FaceButton\";\nimport ParamsModal from \"../ParamsModal\";\n\nimport './style.scss';\n\nexport interface IHeaderProps {\n    loading: boolean;\n    params: IGameParams;\n    gameId: string;\n    gameState: 'none' | 'win' | 'lose';\n    onNewGame: (newParams: IGameParams) => void;\n    minesLeft: number;\n}\n\nexport default function Header(props: IHeaderProps) {\n    const [time, setTime] = useState(0);\n    const [paramsModalVisible, setParamsModalVisible] = useState(false);\n\n    // timer tick\n    useEffect(() => {\n        let timer: any = null;\n        if (props.gameState === 'none') {\n            timer = setTimeout(() => setTime(time + 1), 1000);\n        }\n        return () => (timer ? clearTimeout(timer) : void 0);\n    }, [time, props.gameState]);\n\n    // reset timer on new game\n    useEffect(() => {\n        if (props.gameState === 'none') {\n            setTime(0);\n        }\n    }, [props.gameId, props.gameState])\n\n    return (\n        <div className=\"header\">\n            <ParamsModal\n                params={props.params}\n                visible={paramsModalVisible}\n                onNewParams={p => {\n                    props.onNewGame(p);\n                    setParamsModalVisible(false);\n                }}\n            />\n            <div className=\"time\">\n                <DigitsCounter value={time} />\n            </div>\n            <div className=\"restart\">\n                <FaceButton\n                    loading={props.loading}\n                    state={props.gameState === 'none' ? \"unpressed\" : props.gameState}\n                    onClick={() => setParamsModalVisible(true)}\n                />\n            </div>\n            <div className=\"mines-left\">\n                <DigitsCounter value={props.minesLeft} />\n            </div>\n        </div>\n    )\n}","import classNames from 'classnames';\n\nimport useMinesweeper from '../../hooks/useMinesweeper';\n\nimport Field from '../Field';\nimport Header from '../Header';\n\nimport './style.scss';\n\nfunction App() {\n    const { actions, state } = useMinesweeper();\n\n    return (\n        <div className={classNames('app', state.gameState, { loading: state.loading })}>\n            <Header\n                params={state.params}\n                gameId={state.gameId}\n                loading={state.loading}\n                gameState={state.gameState}\n                onNewGame={actions.newGame}\n                minesLeft={state.params.mines - state.flagsCount}\n            />\n            {(state.field && state.colorizationPromise) ? (\n                <Field\n                    params={state.params}\n                    emptySubstitute={state.emptySubstitute}\n                    onGameStateUpdate={actions.setGameState}\n                    onAddFlag={actions.addFlag}\n                    onRemoveFlag={actions.removeFlag}\n                    field={state.field}\n                    colorizationPromise={state.colorizationPromise}\n                    onFieldUpdate={actions.setField}\n                />\n            ) : (\n                <div className=\"placeholder\">\n                    Press on a smiling face to start new game.\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}