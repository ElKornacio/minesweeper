{"version":3,"sources":["components/DigitsCounter/index.tsx","components/FaceButton/index.tsx","utils/useElementResize.tsx","components/Field/consts.ts","components/Field/FieldContent.tsx","components/Field/generateField.ts","components/Field/index.tsx","components/App/index.tsx","index.tsx"],"names":["DigitsCounter","props","value","rest","className","digits","toString","padStart","split","map","d","idx","classNames","FaceButton","state","getDimensions","ref","width","clientWidth","height","clientHeight","cellSize","CELL_CLASS","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","preventContextMenu","e","preventDefault","Cell","x","y","onCellClick","cls","onContextMenu","onMouseUp","stopPropagation","button","Cells","params","field","smallSlice","array","xStart","xEnd","yStart","yEnd","push","style","transform","columns","FieldContent","slice","tX","tY","getRandomIndexes","length","amount","Error","randomIndexes","i","ri","includes","Math","floor","random","generateField","size","rows","mines","Uint8Array","probability","minesIndexes","Uint32Array","min","emptiesIndexes","minesLength","emptiesLength","minesCount","conv","count","Field","onGameStateUpdate","onFieldUpdate","onAddFlag","onRemoveFlag","fieldWrapper","useRef","fieldWrapperSize","useState","elementSize","setElementSize","useEffect","dims","current","handler","window","addEventListener","removeEventListener","useElementResize","fieldSize","initialX","initialY","getInitialPos","X","setX","Y","setY","startX","startY","xViewportSize","overHead","yViewportSize","overheadX","overheadY","v","x1","y1","newField","fillOpen","th","stack","stack2","t","x2","y2","iv","vv","handleCellClick","useCallback","leftButton","gameLose","onWheel","newX","deltaX","newY","deltaY","z","defaultField","Header","gameId","gameState","onNewGame","minesLeft","time","setTime","timer","setTimeout","clearTimeout","onClick","prompt","columnsS","rowsS","minesS","Number","App","flagsCount","setFlagsCount","setGameState","setField","setColumns","setRows","setMines","newGameCallback","String","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64e09ba1.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\n\nimport './style.scss';\n\nexport default function DigitsCounter(props: Exclude<React.HTMLAttributes<HTMLDivElement>, 'src'> & { value: number }) {\n    const { value, className, ...rest } = props;\n\n    if (value < 0) {\n        return null;\n    }\n\n    const digits = value.toString().padStart(3, '0').split('');\n\n    return (\n        <div\n            className=\"digits-counter\"\n            {...rest}\n        >\n            {digits.map((d, idx) => (\n                <div className={classNames('digit', 'd' + d)} key={idx} />\n            ))}\n        </div>\n    )\n}","import classNames from 'classnames';\nimport React from 'react';\n\nimport './style.scss';\n\ntype FaceState = 'pressed' | 'unpressed' | 'win' | 'lose';\n\nexport default function FaceButton(props: Exclude<React.HTMLAttributes<HTMLImageElement>, 'src'> & { state: FaceState }) {\n    const { state, ...rest } = props;\n    return (\n        <div\n            className={classNames('face-button', 'state-' + state)}\n            {...rest}\n        />\n    )\n}","import { RefObject, useState, useEffect } from \"react\";\n\nexport interface IDimensions {\n    width: number;\n    height: number;\n}\n\nfunction getDimensions(ref: HTMLElement) {\n    return {\n        width: ref.clientWidth,\n        height: ref.clientHeight,\n    };\n}\n\nexport default function useElementResize(ref: RefObject<HTMLElement>): IDimensions {\n    const [elementSize, setElementSize] = useState<IDimensions>({ width: 800, height: 600 });\n\n    useEffect(() => {\n        const dims = getDimensions(ref.current!);\n        setElementSize(dims);\n\n        const handler = () => {\n            const dims = getDimensions(ref.current!);\n            setElementSize(dims);\n        };\n\n        window.addEventListener('resize', handler);\n        return () => window.removeEventListener('resize', handler);\n    }, []);\n\n    return elementSize;\n}","export const cellSize = 30;\n\nexport const CELL_EMPTY = 255;\nexport const CELL_CLOSED = 254;\nexport const CELL_MINE = 253;\nexport const CELL_EXPLODED = 252;\nexport const CELL_FLAG = 251;\nexport const CELL_FLAG_WRONG = 250;\n\nexport const CELL_CLASS: Record<number, string> = {\n    0: 'closed',\n    1: 'closed',\n    2: 'closed',\n    3: 'closed',\n    4: 'closed',\n    5: 'closed',\n    6: 'closed',\n    7: 'closed',\n    8: 'closed',\n    9: 'closed',\n\n    10: 'empty',\n    11: 'm1',\n    12: 'm2',\n    13: 'm3',\n    14: 'm4',\n    15: 'm5',\n    16: 'm6',\n    17: 'm7',\n    18: 'm8',\n    19: 'mine',\n\n    20: 'flag',\n    21: 'flag',\n    22: 'flag',\n    23: 'flag',\n    24: 'flag',\n    25: 'flag',\n    26: 'flag',\n    27: 'flag',\n    28: 'flag',\n    29: 'flag',\n\n    [CELL_EMPTY]: 'empty',\n    [CELL_CLOSED]: 'closed',\n    [CELL_MINE]: 'mine',\n    [CELL_EXPLODED]: 'exploded',\n    [CELL_FLAG]: 'flag',\n    [CELL_FLAG_WRONG]: 'flag-wrong',\n}","import classNames from \"classnames\";\nimport React, { HTMLAttributes, useCallback } from \"react\";\nimport { IGameParams } from \".\";\nimport { CELL_CLASS, cellSize } from \"./consts\";\n\ninterface IFieldSmallSlice {\n    xStart: number;\n    xEnd: number;\n    yStart: number;\n    yEnd: number;\n}\n\ninterface IFieldSlice extends IFieldSmallSlice {\n    tX: number;\n    tY: number;\n}\n\ninterface ICellProps {\n    state: number;\n    x: number;\n    y: number;\n    onCellClick: (leftButton: boolean, x: number, y: number) => void;\n}\n\nconst preventContextMenu = (e: React.MouseEvent) => e.preventDefault();\n\nfunction Cell(props: HTMLAttributes<HTMLDivElement> & ICellProps) {\n    const { state, className, x, y, onCellClick, ...rest } = props;\n    const cls = CELL_CLASS[state];\n    return (\n        <div\n            className={classNames('cell', `cell-${cls}`, className)}\n            onContextMenu={preventContextMenu}\n            onMouseUp={e => {\n                e.preventDefault();\n                e.stopPropagation();\n                onCellClick(e.button === 0, x, y);\n            }}\n            {...rest}\n        />\n    );\n}\n\ninterface ICellsProps {\n    params: IGameParams;\n    field: Uint8Array;\n    smallSlice: IFieldSmallSlice;\n    onCellClick: (leftButton: boolean, x: number, y: number) => void;\n}\n\nfunction Cells({ params, field, smallSlice, onCellClick }: ICellsProps) {\n    const array: any[] = [];\n\n    for (let x = smallSlice.xStart; x < smallSlice.xEnd; x++) {\n        for (let y = smallSlice.yStart; y < smallSlice.yEnd; y++) {\n            array.push(\n                <Cell\n                    key={`${(x - smallSlice.xStart)}:${(y - smallSlice.yStart)}`}\n                    style={{\n                        transform: `translate(${(x - smallSlice.xStart) * cellSize}px, ${(y - smallSlice.yStart) * cellSize}px)`\n                    }}\n                    x={x}\n                    y={y}\n                    state={field[x * params.columns + y]}\n                    onCellClick={onCellClick}\n                />\n            );\n        }\n    }\n\n    return (<>{array}</>)\n}\n\nexport default function FieldContent({ params, field, slice, onCellClick }: { params: IGameParams, field: Uint8Array, slice: IFieldSlice, onCellClick: (leftButton: boolean, x: number, y: number) => void }) {\n    return (\n        <div\n            className=\"field\"\n            style={{\n                width: (slice.xEnd - slice.xStart) * cellSize + 2,\n                height: (slice.yEnd - slice.yStart) * cellSize + 2,\n                transform: `translate(${slice.tX}px, ${slice.tY}px)`\n            }}\n        >\n            <Cells params={params} field={field} smallSlice={slice} onCellClick={onCellClick} />\n        </div>\n    );\n}\n","import { IGameParams } from \".\";\n\nfunction getRandomIndexes(length: number, amount: number): number[] {\n    if (amount > length) {\n        throw new Error('Cant generate more unique indexes than array length');\n    }\n    const randomIndexes: number[] = [];\n    for (let i = 0; i < amount; i++) {\n        let ri;\n        while (randomIndexes.includes(ri = Math.floor(Math.random() * length))) {\n        }\n        randomIndexes.push(ri);\n    }\n    return randomIndexes;\n}\n\nexport default function generateField(params: IGameParams) {\n    const size = params.columns * params.rows;\n    const mines = params.mines;\n    const field = new Uint8Array(size);\n    const probability = mines / (size);\n    const minesIndexes = new Uint32Array(Math.min(size, mines * 5));\n    const emptiesIndexes = new Uint32Array(Math.min(size, (size - mines) * 5));\n\n    let minesLength = 0;\n    let emptiesLength = 0;\n    let minesCount = 0;\n    for (let i = 0; i < field.length; i++) {\n        if (Math.random() < probability) {\n            field[i] = 9;\n            minesIndexes[minesLength++] = i;\n            minesCount++;\n        } else {\n            field[i] = 0;\n            emptiesIndexes[emptiesLength++] = i;\n        }\n    }\n\n    if (minesCount > mines) {\n        const diff = minesCount - mines;\n        const randomIndexes: number[] = getRandomIndexes(minesLength, diff);\n        for (let randomIndex of randomIndexes) {\n            field[minesIndexes[randomIndex]] = 0;\n            minesCount--;\n        }\n    } else\n        if (minesCount < mines) {\n            const diff = mines - minesCount;\n            const randomIndexes: number[] = getRandomIndexes(emptiesLength, diff);\n            for (let randomIndex of randomIndexes) {\n                field[emptiesIndexes[randomIndex]] = 9;\n                minesCount++;\n            }\n        }\n\n    const conv = (x: number, y: number) => x * params.columns + y;\n\n    for (let x = 0; x < params.columns; x++) {\n        for (let y = 0; y < params.rows; y++) {\n            const i = conv(x, y);\n            if (field[i] === 0) {\n                let count = 0;\n                if (y - 1 >= 0) {\n                    count += (x - 1 >= 0) ? ((field[conv(x - 1, y - 1)] === 9) ? 1 : 0) : 0;\n                    count += (field[conv(x, y - 1)] === 9) ? 1 : 0;\n                    count += (x + 1 < params.columns) ? ((field[conv(x + 1, y - 1)] === 9) ? 1 : 0) : 0;\n                }\n\n                if (y + 1 < params.rows) {\n                    count += (x - 1 >= 0) ? ((field[conv(x - 1, y + 1)] === 9) ? 1 : 0) : 0;\n                    count += (field[conv(x, y + 1)] === 9) ? 1 : 0;\n                    count += (x + 1 < params.columns) ? ((field[conv(x + 1, y + 1)] === 9) ? 1 : 0) : 0;\n                }\n\n                count += (x - 1 >= 0) ? ((field[conv(x - 1, y)] === 9) ? 1 : 0) : 0;\n                count += (x + 1 < params.columns) ? ((field[conv(x + 1, y)] === 9) ? 1 : 0) : 0;\n\n                field[i] = count;\n            }\n        }\n    }\n\n    // for (let i = 0; i < field.length; i++) {\n    //     field[i] += 10;\n    // }\n\n    return field;\n}","import React, { useCallback } from 'react';\nimport { useEffect, useRef, useState } from 'react';\nimport useElementResize, { IDimensions } from '../../utils/useElementResize';\nimport { cellSize, CELL_EXPLODED, CELL_FLAG_WRONG } from './consts';\nimport FieldContent from './FieldContent';\nimport generateField from './generateField';\nimport './style.scss';\n\nexport interface IGameParams {\n    rows: number;\n    columns: number;\n    mines: number;\n}\n\nfunction getInitialPos(fieldSize: IDimensions, fieldWrapperSize: IDimensions) {\n    let initialX = 0;\n    let initialY = 0;\n\n    if (fieldSize.width < fieldWrapperSize.width) {\n        initialX = (fieldWrapperSize.width - fieldSize.width) / 2;\n    }\n\n    if (fieldSize.height < fieldWrapperSize.height) {\n        initialY = (fieldWrapperSize.height - fieldSize.height) / 2;\n    }\n\n    return { initialX, initialY };\n}\n\n//@ts-ignore\nwindow.generateField = (x, y, z) => generateField({ columns: x, rows: y, mines: z });\n\nexport default function Field({ params, onGameStateUpdate, field, onFieldUpdate, onAddFlag, onRemoveFlag }: { params: IGameParams, field: Uint8Array, onFieldUpdate: (newField: Uint8Array) => void, onGameStateUpdate: (newState: 'none' | 'win' | 'lose') => void, onAddFlag: () => void, onRemoveFlag: () => void }) {\n    const fieldWrapper = useRef<HTMLDivElement>(null);\n    const fieldWrapperSize = useElementResize(fieldWrapper);\n    const conv = (x: number, y: number) => x * params.columns + y;\n\n    const fieldSize = { width: cellSize * params.columns, height: cellSize * params.rows };\n\n    const { initialX, initialY } = getInitialPos(fieldSize, fieldWrapperSize);\n    \n    const [ X, setX ] = useState(initialX);\n    const [ Y, setY ] = useState(initialY);\n\n    useEffect(() => {\n        setX(initialX);\n        setY(initialY);\n    }, [params]);\n\n    const overHead = 3;\n\n    const xViewportSize = Math.floor(fieldWrapperSize.width / cellSize) + overHead * 2;\n    const yViewportSize = Math.floor(fieldWrapperSize.height / cellSize) + overHead * 2;\n\n    let startX;\n    let tX;\n    if (fieldSize.width > fieldWrapperSize.width) {\n        const overheadX = Math.floor((-X) / (cellSize));\n        startX = overheadX < overHead ? 0 : (overheadX - overHead);\n        tX = overheadX < overHead ? X : (X + startX * cellSize);\n    } else {\n        startX = 0;\n        tX = X;\n    }\n\n    let startY;\n    let tY;\n    if (fieldSize.width > fieldWrapperSize.width) {\n        const overheadY = Math.floor((-Y) / (cellSize));\n        startY = overheadY < overHead ? 0 : (overheadY - overHead);\n        tY = overheadY < overHead ? Y : (Y + startY * cellSize);\n    } else {\n        startY = 0;\n        tY = Y;\n    }\n\n    const slice = {\n        tX: tX,\n        tY: tY,\n        xStart: startX,\n        xEnd: Math.min(params.columns, startX + xViewportSize),\n        yStart: startY,\n        yEnd: Math.min(params.rows, startY + yViewportSize),\n    };\n\n    const gameLose = (x: number, y: number) => {\n        if (!field) {\n            return;\n        }\n\n        const newField = new Uint8Array(field);\n        newField[conv(x, y)] = CELL_EXPLODED;\n        for (let i = 0; i < newField.length; i++) {\n            let v = newField[i];\n            if (v < 10) {\n                v += 10;\n            } else\n            if (v < 30 && v >= 20) {\n                if (v !== 29) {\n                    v = CELL_FLAG_WRONG;\n                }\n            }\n            newField[i] = v;\n        }\n\n        onFieldUpdate(newField);\n        onGameStateUpdate('lose');\n    }\n\n    const v = (x1: number, y1: number, newField: Uint8Array) => {\n        if (x1 < 0 || y1 < 0 || x1 >= params.columns || y1 >= params.rows) {\n            return - 1;\n        }\n        return newField[conv(x1, y1)]\n    };\n\n    const fillOpen = (x1: number, y1: number, newField: Uint8Array) => {\n        const th = 300 * 1000 * 1000;\n        const stack = new Uint32Array(th);\n        const stack2 = new Uint32Array(th);\n        stack[0] = conv(x1, y1);\n        let length = 1;\n\n        const t = (x2: number, y2: number) => {\n            const vv = v(x2, y2, newField);\n            if (length >= th) {\n                stack2[(length++) - th] = conv(x2, y2);\n            } else {\n                stack[length++] = conv(x2, y2);\n            }\n        }\n\n        while (length) {\n            let iv: number;\n            if (length >= th) {\n                iv = stack2[(--length) - th];\n            } else {\n                iv = stack[--length];\n            }\n            const x = Math.floor(iv / params.columns);\n            const y = iv % params.columns;\n\n            const vv = v(x, y, newField);\n\n            if (vv !== -1 && vv < 10 && vv !== 9) {\n                newField[conv(x, y)] += 10;\n            }\n            if (vv !== 0) {\n                continue;\n            }\n\n            t(x - 1,    y - 1);\n            t(x,        y - 1);\n            t(x + 1,    y - 1);\n\n            t(x - 1,    y);\n            t(x + 1,    y);\n\n            t(x - 1,    y + 1);\n            t(x,        y + 1);\n            t(x + 1,    y + 1);\n        }\n    }\n\n    const handleCellClick = useCallback((leftButton: boolean, x: number, y: number) => {\n        if (!field) {\n            return;\n        }\n        const newField = new Uint8Array(field);\n        let v = newField[conv(x, y)];\n        if (leftButton) {\n            if (v >= 10) {\n                return;\n            } else {\n                if (v === 0) {\n                    fillOpen(x, y, newField);\n                } else\n                if (v === 9) {\n                    return gameLose(x, y);\n                } else {\n                    newField[conv(x, y)] += 10;\n                }\n            }\n        } else {\n            if (v < 10) {\n                newField[conv(x, y)] += 20;\n                onAddFlag();\n            } else\n            if (v >= 20 && v < 30) {\n                newField[conv(x, y)] -= 20;\n                onRemoveFlag();\n            }\n        }\n\n        onFieldUpdate(newField);\n    }, [field, params]);\n\n    useEffect(() => {\n        if (fieldSize.width < fieldWrapperSize.width) {\n            setX((fieldWrapperSize.width - fieldSize.width) / 2);\n        }\n\n        if (fieldSize.height < fieldWrapperSize.height) {\n            setY((fieldWrapperSize.height - fieldSize.height) / 2);\n        }\n    }, [fieldWrapperSize])\n\n    return (\n        <div\n            ref={fieldWrapper}\n            className=\"field-wrapper\"\n            onWheel={(e) => {\n                let newX = X - e.deltaX;\n                let newY = Y - e.deltaY;\n\n                if (fieldSize.width < fieldWrapperSize.width) {\n                    newX = (fieldWrapperSize.width - fieldSize.width) / 2;\n                } else\n                if (fieldSize.width > fieldWrapperSize.width && (newX < -1 * (fieldSize.width - fieldWrapperSize.width))) {\n                    newX = -1 * (fieldSize.width - fieldWrapperSize.width);\n                } else\n                if (newX > 0) {\n                    newX = 0;\n                }\n\n                if (fieldSize.height < fieldWrapperSize.height) {\n                    newY = (fieldWrapperSize.height - fieldSize.height) / 2;\n                } else\n                if (fieldSize.height > fieldWrapperSize.height && (newY < -1 * (fieldSize.height - fieldWrapperSize.height))) {\n                    newY = -1 * (fieldSize.height - fieldWrapperSize.height);\n                } else\n                if (newY > 0) {\n                    newY = 0;\n                }\n\n                setX(newX);\n                setY(newY);\n            }}\n        >\n            {field ? <FieldContent onCellClick={handleCellClick} slice={slice} field={field} params={params} /> : null}\n        </div>\n    );\n}","import React, { useCallback, useEffect, useState } from 'react';\nimport DigitsCounter from '../DigitsCounter';\nimport FaceButton from '../FaceButton';\nimport Field, { IGameParams } from '../Field';\nimport generateField from '../Field/generateField';\n\nimport './style.scss';\n\nconst defaultField = generateField({ columns: 20, rows: 20, mines: 70 });\n\nfunction Header({ params, gameId, gameState, onNewGame, minesLeft }: { params: IGameParams, gameId: string, gameState: 'none' | 'win' | 'lose', onNewGame: (columns: number, rows: number, mines: number) => void, minesLeft: number }) {\n    const [ time, setTime ] = useState(0);\n\n    useEffect(() => {\n        let timer: any = null;\n        if (gameState === 'none') {\n            timer = setTimeout(() => setTime(time + 1), 1000);\n        }\n        return () => (timer ? clearTimeout(timer) : void 0);\n    }, [time, gameState]);\n\n    useEffect(() => {\n        if (gameState === 'none') {\n            setTime(0);\n        }\n    }, [gameId, gameState])\n\n    return (\n        <div className=\"header\">\n            <div className=\"time\"><DigitsCounter value={time} /></div>\n            <div className=\"restart\">\n                <FaceButton\n                    state={gameState === 'none' ? \"unpressed\" : (gameState === 'lose' ? 'lose' : 'win')}\n                    onClick={() => {\n                        const [ columnsS, rowsS, minesS ] = prompt('Введите параметры через запятую: Columns,Rows,Mines', `${params.columns},${params.rows},${params.mines}`)!.split(',');\n                        onNewGame(Number(columnsS), Number(rowsS), Number(minesS));\n                    }}\n                />\n            </div>\n            <div className=\"mines-left\"><DigitsCounter value={minesLeft} /></div>\n        </div>\n    )\n}\n\nfunction App() {\n    const [ gameId, setGameId ] = useState('1');\n    const [ flagsCount, setFlagsCount ] = useState(0);\n    const [ gameState, setGameState ] = useState<'none' | 'lose' | 'win'>('none');\n    const [ field, setField ] = useState(defaultField);\n    const [ columns, setColumns ] = useState('20');\n    const [ rows, setRows ] = useState('20');\n    const [ mines, setMines ] = useState('70');\n\n    const newGameCallback = useCallback((columns: number, rows: number, mines: number) => {\n        setColumns(String(columns));\n        setRows(String(rows));\n        setMines(String(mines));\n        setField(generateField({ columns: columns, rows: rows, mines: mines }));\n        setGameState('none');\n    }, []);\n\n    return (\n        <div className=\"app\" onClick={console.log}>\n            <Header\n                params={{ columns: Number(columns), rows: Number(rows), mines: Number(mines) }}\n                gameId={gameId}\n                gameState={gameState}\n                onNewGame={newGameCallback}\n                minesLeft={Number(mines) - flagsCount}\n            />\n            <Field\n                params={{ columns: Number(columns), rows: Number(rows), mines: Number(mines) }}\n                onGameStateUpdate={setGameState}\n                onAddFlag={() => {\n                    setFlagsCount(flagsCount + 1);\n                }}\n                onRemoveFlag={() => {\n                    setFlagsCount(flagsCount - 1);\n                }}\n                field={field}\n                onFieldUpdate={setField}\n            />\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}